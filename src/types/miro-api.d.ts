/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/v1/oauth/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revoke token (v1)
         * @deprecated
         * @description <p><b>Please use the new revoke endpoint <code>/v2/oauth/revoke</code>. This endpoint is considered vulnerable and deprecated due to access token passed publicly in the URL.</b></p> Revoke the current access token. Revoking an access token means that the access token will no longer work. When an access token is revoked, the refresh token is also revoked and no longer valid. This does not uninstall the application for the user.
         */
        post: operations["revoke-token"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/oauth-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get access token information
         * @description Get information about an access token, such as the token type, scopes, team, user, token creation date and time, and the user who created the token.
         */
        get: operations["token-info"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/audit/logs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get audit logs
         * @description Retrieves a page of audit events from the last 90 days. If you want to retrieve data that is older than 90 days, you can use the <a target=_blank href="https://help.miro.com/hc/en-us/articles/360017571434-Audit-logs#h_01J7EY4E0F67EFTRQ7BT688HW0">CSV export feature</a>.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>auditlogs:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a>
         */
        get: operations["enterprise-get-audit-logs"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/data-classification-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization settings
         * @description Retrieves board classification settings for an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-dataclassification-organization-settings-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/data-classification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Bulk update boards classification
         * @description Updates board classification for not-classified only or all boards in an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        patch: operations["enterprise-dataclassification-team-boards-bulk"];
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/data-classification-settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team settings
         * @description Retrieves board classification settings for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-dataclassification-team-settings-get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update team settings
         * @description Updates board classification settings for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        patch: operations["enterprise-dataclassification-team-settings-set"];
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/boards/{board_id}/data-classification": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get board classification
         * @description Retrieves board classification for a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-dataclassification-board-get"];
        put?: never;
        /**
         * Update board classification
         * @description Updates board classification for an existing board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        post: operations["enterprise-dataclassification-board-set"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/cases": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all cases
         * @description Retrieves the list of eDiscovery cases in an organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organization:cases:management</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise Guard only</h3> <p>This API is available only for Enterprise plan users with the <a target=_blank href="https://help.miro.com/hc/en-us/articles/15699815402514-Enterprise-Guard-overview">Enterprise Guard add-on</a>. You can only use this endpoint if you have both the Company Admin and <a target=_blank href="https://help.miro.com/hc/en-us/articles/15695755655954-Understand-admin-roles-and-their-privileges-Beta#01JARF6KM8ATNT6YDMGD7GMYJN">eDiscovery Admin</a> roles.
         */
        get: operations["get-all-cases"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/cases/{case_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get case
         * @description Retrieves information about a case in an organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organization:cases:management</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a> <br/><h3>Enterprise Guard only</h3> <p>This API is available only for Enterprise plan users with the <a target=_blank href="https://help.miro.com/hc/en-us/articles/15699815402514-Enterprise-Guard-overview">Enterprise Guard add-on</a>. You can only use this endpoint if you have both the Company Admin and <a target=_blank href="https://help.miro.com/hc/en-us/articles/15695755655954-Understand-admin-roles-and-their-privileges-Beta#01JARF6KM8ATNT6YDMGD7GMYJN">eDiscovery Admin</a> roles.
         */
        get: operations["get-case"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/cases/{case_id}/legal-holds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all legal holds within a case
         * @description Retrieves the list of all legal holds within a case for an organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organization:cases:management</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise Guard only</h3> <p>This API is available only for Enterprise plan users with the <a target=_blank href="https://help.miro.com/hc/en-us/articles/15699815402514-Enterprise-Guard-overview">Enterprise Guard add-on</a>. You can only use this endpoint if you have both the Company Admin and <a target=_blank href="https://help.miro.com/hc/en-us/articles/15695755655954-Understand-admin-roles-and-their-privileges-Beta#01JARF6KM8ATNT6YDMGD7GMYJN">eDiscovery Admin</a> roles.
         */
        get: operations["get-all-legal-holds"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/cases/{case_id}/legal-holds/{legal_hold_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get legal hold information
         * @description Retrieves information about a legal hold within a case for an organization. <br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organization:cases:management</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a> <br/><h3>Enterprise Guard only</h3> <p>This API is available only for Enterprise plan users with the <a target=_blank href="https://help.miro.com/hc/en-us/articles/15699815402514-Enterprise-Guard-overview">Enterprise Guard add-on</a>. You can only use this endpoint if you have both the Company Admin and <a target=_blank href="https://help.miro.com/hc/en-us/articles/15695755655954-Understand-admin-roles-and-their-privileges-Beta#01JARF6KM8ATNT6YDMGD7GMYJN">eDiscovery Admin</a> roles.
         */
        get: operations["get-legal-hold"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/cases/{case_id}/legal-holds/{legal_hold_id}/content-items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get content items under legal hold
         * @description Once a legal hold is in place you can review or explore the preserved Miro boards to ensure that all relevant data is intact and ready for legal proceedings or investigations. For more information, see our <a href="https://help.miro.com/hc/en-us/articles/22120628583570-Review-boards-under-legal-hold" target=_blank>Help Center page on reviewing boards under legal hold</a>. <br><br>This API lists all content items under a specific legal hold in a case for an organization. Please verify that the legal hold is in 'ACTIVE' state to guarantee that the legal hold has finished processing the full list of content items under hold. <br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organization:cases:management</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a> <br/><h3>Enterprise Guard only</h3> <p>This API is available only for Enterprise plan users with the <a target=_blank href="https://help.miro.com/hc/en-us/articles/15699815402514-Enterprise-Guard-overview">Enterprise Guard add-on</a>. You can only use this endpoint if you have both the Company Admin and <a target=_blank href="https://help.miro.com/hc/en-us/articles/15695755655954-Understand-admin-roles-and-their-privileges-Beta#01JARF6KM8ATNT6YDMGD7GMYJN">eDiscovery Admin</a> roles.
         */
        get: operations["get-legal-hold-content-items"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/boards/export/jobs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create board export job
         * @description Creates an export job for one or more boards.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:export</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin and eDiscovery is enabled in the Settings. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        post: operations["enterprise-create-board-export"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/boards/export/jobs/{job_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get board export job status
         * @description Retrieves the status of the board export job.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:export</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin and eDiscovery is enabled in the Settings. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-board-export-job-status"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/boards/export/jobs/{job_id}/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get results for board export job
         * @description Retrieves the result of the board export job. The response provides more information about the board export job, such as the S3 link to the files created.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:export</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin and eDiscovery is enabled in the Settings. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-board-export-job-results"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/content-logs/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Retrieve content change logs of board items
         * @description Retrieves content changes for board items within your organization. Content changes are actions that users can perform on board items, such as updating a sticky note's text. You can retrieve results for a specific time period. You can also filter results based on the board IDs and the emails of users who created, modified, or deleted a board item. Additionally, results can be paginated for easier viewing and processing.
         *     <br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>contentlogs:export</a>
         *     <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a>
         *     <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin.</p>
         *
         */
        get: operations["enterprise-board-content-item-logs-fetch"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/sessions/reset_all": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset all sessions of a user
         * @description Reset all sessions of a user.  Admins can now take immediate action to restrict user access to company data in case of security concerns. Calling this API ends all active Miro sessions across devices for a particular user, requiring the user to sign in again. This is useful in situations where a user leaves the company, their credentials are compromised, or there's suspicious activity on their account.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>sessions:delete</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        post: operations["enterprise-post-user-sessions-reset"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization info
         * @description Retrieves organization information.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-organization"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization members
         * @description Retrieves organization members based on the organization ID and the cursor, or based on the user emails provided in the request.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-organization-members"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/members/{member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get organization member
         * @description Retrieves organization member information for an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-organization-member"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get boards
         * @description Retrieves a list of boards accessible to the user associated with the provided access token. This endpoint supports filtering and sorting through URL query parameters.
         *     Customize the response by specifying `team_id`, `project_id`, or other query parameters. Filtering by `team_id` or `project_id` (or both) returns results instantly. For other filters, allow a few seconds for indexing of newly created boards.
         *
         *     If you're an Enterprise customer with Company Admin permissions:
         *
         *     - Enable **Content Admin** permissions to retrieve all boards, including private boards (those not explicitly shared with you). For details, see the [Content Admin Permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins).
         *     - Note that **Private board contents remain inaccessible**. The API allows you to verify their existence but prevents viewing their contents to uphold security best practices. Unauthorized access attempts will return an error.
         *     <h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         *
         */
        get: operations["get-boards"];
        /**
         * Copy board
         * @description Creates a copy of an existing board. You can also update the name, description, sharing policy, and permissions policy for the new board in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a><br/>
         */
        put: operations["copy-board"];
        /**
         * Create board
         * @description Creates a board with the specified name and sharing policies.<br/><h4>Note</h4> You can only create up to 3 team boards with the free plan.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        post: operations["create-board"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific board
         * @description Retrieves information about a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-specific-board"];
        put?: never;
        post?: never;
        /**
         * Delete board
         * @description Deletes a board. Deleted boards go to Trash (on paid plans) and can be restored via UI within 90 days after deletion.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-board"];
        options?: never;
        head?: never;
        /**
         * Update board
         * @description Updates a specific board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-board"];
        trace?: never;
    };
    "/v2/boards/{board_id}/app_cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create app card item
         * @description Adds an app card item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-app-card-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/app_cards/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app card item
         * @description Retrieves information for a specific app card item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-app-card-item"];
        put?: never;
        post?: never;
        /**
         * Delete app card item
         * @description Deletes an app card item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-app-card-item"];
        options?: never;
        head?: never;
        /**
         * Update app card item
         * @description Updates an app card item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-app-card-item"];
        trace?: never;
    };
    "/v2/boards/{board_id}/cards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create card item
         * @description Adds a card item to a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-card-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/cards/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get card item
         * @description Retrieves information for a specific card item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-card-item"];
        put?: never;
        post?: never;
        /**
         * Delete card item
         * @description Deletes a card item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-card-item"];
        options?: never;
        head?: never;
        /**
         * Update card item
         * @description Updates a card item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-card-item"];
        trace?: never;
    };
    "/v2/boards/{board_id}/connectors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get connectors
         * @description Retrieves a list of connectors for a specific board.
         *
         *     This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        get: operations["get-connectors"];
        put?: never;
        /**
         * Create connector
         * @description Adds a connector to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-connector"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/connectors/{connector_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific connector
         * @description Retrieves information for a specific connector on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-connector"];
        put?: never;
        post?: never;
        /**
         * Delete connector
         * @description Deletes the specified connector from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-connector"];
        options?: never;
        head?: never;
        /**
         * Update connector
         * @description Updates a connector on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-connector"];
        trace?: never;
    };
    "/v2/boards/{board_id}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create document item using URL
         * @description Adds a document item to a board by specifying the URL where the document is hosted.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-document-item-using-url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/documents/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get document item
         * @description Retrieves information for a specific document item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-document-item"];
        put?: never;
        post?: never;
        /**
         * Delete document item
         * @description Deletes a document item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-document-item"];
        options?: never;
        head?: never;
        /**
         * Update document item using URL
         * @description Updates a document item on a board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-document-item-using-url"];
        trace?: never;
    };
    "/v2/boards/{board_id}/embeds": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create embed item
         * @description Adds an embed item containing external content to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-embed-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/embeds/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get embed item
         * @description Retrieves information for a specific embed item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-embed-item"];
        put?: never;
        post?: never;
        /**
         * Delete embed item
         * @description Deletes an embed item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-embed-item"];
        options?: never;
        head?: never;
        /**
         * Update embed item
         * @description Updates an embed item on a board based on the data properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-embed-item"];
        trace?: never;
    };
    "/v2/boards/{board_id}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create image item using URL
         * @description Adds an image item to a board by specifying an image URL.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-image-item-using-url"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/images/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get image item
         * @description Retrieves information for a specific image item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-image-item"];
        put?: never;
        post?: never;
        /**
         * Delete image item
         * @description Deletes an image item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-image-item"];
        options?: never;
        head?: never;
        /**
         * Update image item using URL
         * @description Updates an image item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-image-item-using-url"];
        trace?: never;
    };
    "/v2/boards/{board_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items on board
         * @description Retrieves a list of items for a specific board. You can retrieve all items on the board, a list of child items inside a parent item, or a list of specific types of items by specifying URL query parameter values.
         *
         *     This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        get: operations["get-items"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific item on board
         * @description Retrieves information for a specific item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-specific-item"];
        put?: never;
        post?: never;
        /**
         * Delete item
         * @description Deletes an item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-item"];
        options?: never;
        head?: never;
        /**
         * Update item position or parent
         * @description Updates the position or the parent of an item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-item-position-or-parent"];
        trace?: never;
    };
    "/v2/boards/{board_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all board members
         * @description Retrieves a pageable list of members for a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-board-members"];
        put?: never;
        /**
         * Share board
         * @description Shares the board and Invites new members to collaborate on a board by sending an invitation email. Depending on the board's Sharing policy, there might be various scenarios where membership in the team is required in order to share the board with a user.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        post: operations["share-board"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/members/{board_member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific board member
         * @description Retrieves information for a board member.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-specific-board-member"];
        put?: never;
        post?: never;
        /**
         * Remove board member
         * @description Removes a board member from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        delete: operations["remove-board-member"];
        options?: never;
        head?: never;
        /**
         * Update board member
         * @description Updates the role of a board member.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-board-member"];
        trace?: never;
    };
    "/v2/boards/{board_id}/shapes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create shape item
         * @description Adds a shape item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-shape-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/shapes/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get shape item
         * @description Retrieves information for a specific shape item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-shape-item"];
        put?: never;
        post?: never;
        /**
         * Delete shape item
         * @description Deletes a shape item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-shape-item"];
        options?: never;
        head?: never;
        /**
         * Update shape item
         * @description Updates a shape item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-shape-item"];
        trace?: never;
    };
    "/v2/boards/{board_id}/sticky_notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create sticky note item
         * @description Adds a sticky note item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-sticky-note-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/sticky_notes/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get sticky note item
         * @description Retrieves information for a specific sticky note item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-sticky-note-item"];
        put?: never;
        post?: never;
        /**
         * Delete sticky note item
         * @description Deletes a sticky note item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-sticky-note-item"];
        options?: never;
        head?: never;
        /**
         * Update sticky note item
         * @description Updates a sticky note item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-sticky-note-item"];
        trace?: never;
    };
    "/v2/boards/{board_id}/texts": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create text item
         * @description Adds a text item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-text-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/texts/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get text item
         * @description Retrieves information for a specific text item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-text-item"];
        put?: never;
        post?: never;
        /**
         * Delete text item
         * @description Deletes a text item from the board<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-text-item"];
        options?: never;
        head?: never;
        /**
         * Update text item
         * @description Updates a text item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-text-item"];
        trace?: never;
    };
    "/v2/boards/{board_id}/items/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: components["parameters"]["boardId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create items in bulk
         * @description Adds different types of items to a board. You can add up to 20 items of the same or different type per create call. For example, you can create 3 shape items, 4 card items, and 5 sticky notes in one create call. The bulk create operation is transactional. If any item's create operation fails, the create operation for all the remaining items also fails, and none of the items will be created. <br/><br>To try out this API in our documentation:<br/><br>1. In the **BODY PARAMS** section, scroll down until you see **ADD OBJECT** (Figure 1).<br><br><img alt=“add src="https://files.readme.io/570dac1-small-add_object.png"><br>Figure 1. Add object user interface in readme<br><br>2. Click **ADD OBJECT**, and then select or enter the appropriate values for parameters of the item that you want to add.<br><br>3. Repeat steps 1 and 2 for each item that you want to add.<br> <br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a>
         *     <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> per item. For example, if you want to create one sticky note, one card, and one shape item in one call, the rate limiting applicable will be 300 credits. This is because create item calls take Level 2 rate limiting of 100 credits each, 100 for sticky note, 100 for card, and 100 for shape item.
         */
        post: operations["create-items"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id_Platformbulkcreateoperation}/items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: components["parameters"]["boardId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/frames": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create frame
         * @description Adds a frame to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-frame-item"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/frames/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get frame
         * @description Retrieves information for a specific frame on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-frame-item"];
        put?: never;
        post?: never;
        /**
         * Delete frame
         * @description Deletes a frame from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-frame-item"];
        options?: never;
        head?: never;
        /**
         * Update frame
         * @description Updates a frame on a board based on the data, style, or geometry properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-frame-item"];
        trace?: never;
    };
    "/v2/boards/{board_id_PlatformContainers}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items within frame
         * @description Retrieves a list of items within a specific frame. A frame is a parent item and all items within a frame are child items. This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        get: operations["get-items-within-frame"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id_Platformcreateitemsinbulkusingfilefromdevice}/items/bulk": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: components["parameters"]["boardId"];
            };
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create items in bulk using file from device
         * @description Adds different types of items to a board using files from a device. You can add up to 20 items of the same or different type per create call. For example, you can create 5 document items and 5 images in one create call.  The bulk create operation is transactional. If any item's create operation fails, the create operation for all the remaining items also fails, and none of the items will be created.
         *     To try out this API in our documentation:
         *     1. In the **BODY PARAMS** section, select **ADD FILE**, and then upload a local file. Repeat for each item that you want to add.
         *     2. Upload a JSON file that contains the bulk data for the items you want to create.
         *
         *     <h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/> <h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> per item<br/>
         *
         */
        post: operations["create-items-in-bulk-using-file-from-device"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/apps/{app_id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get app metrics
         * @description Returns a list of usage metrics for a specific app for a given time range, grouped by requested time period.
         *
         *     This endpoint requires an app management API token. It can be generated in the <a href="https://developers.miro.com/?features=appMetricsToken#your-apps">Your Apps</a> section of Developer Hub.<br/>
         *     <h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a><br/>
         *     <h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         *
         */
        get: operations["get-metrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/apps/{app_id}/metrics-total": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get total app metrics
         * @description Returns total usage metrics for a specific app since the app was created.
         *
         *     This endpoint requires an app management API token. It can be generated in <a href="https://developers.miro.com/?features=appMetricsToken#your-apps">your apps</a> section of Developer Hub.<br/>
         *     <h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a><br/>
         *     <h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         *
         */
        get: operations["get-metrics-total"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/webhooks/board_subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create webhook subscription
         * @description Creates a webhook subscription to receive notifications when an item on a board is updated. Subscriptions are created per user, per board. You can create multiple subscriptions. We currently support all board items except tags, connectors, and comments.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-board-subscription"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/webhooks/board_subscriptions/{subscription_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update webhook subscription
         * @description Updates the status or the callback URL of an existing webhook subscription.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-board-subscription"];
        trace?: never;
    };
    "/v2-experimental/webhooks/subscriptions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get webhook subscriptions
         * @description Retrieves information about all webhook subscriptions for a specific user.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a><br/>
         */
        get: operations["get-user-subscriptions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/webhooks/subscriptions/{subscription_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific webhook subscription
         * @description Retrieves information for a specific webhook subscription.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        get: operations["get-subscription-by-id"];
        put?: never;
        post?: never;
        /**
         * Delete webhook subscription
         * @description Deletes the specified webhook subscription.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        delete: operations["delete-subscription-by-id"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/boards/{board_id}/mindmap_nodes/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific mind map node
         * @description Retrieves information for a specific mind map node on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-mindmap-node-experimental"];
        put?: never;
        post?: never;
        /**
         * Delete mind map node
         * @description Deletes a mind map node item and its child nodes from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-mindmap-node-experimental"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/boards/{board_id}/mindmap_nodes": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve mind map nodes. */
                board_id: string;
            };
            cookie?: never;
        };
        /**
         * Get mind map nodes
         * @description Retrieves a list of mind map nodes for a specific board.
         *
         *     This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        get: operations["get-mindmap-nodes-experimental"];
        put?: never;
        /**
         * Create mind map node
         * @description Adds a mind map node to a board. A root node is the starting point of a mind map. A node that is created under a root node is a child node. For information on mind maps, use cases, mind map structure, and more, see the <a href="https://developers.miro.com/docs/mind-maps" target=_blank>Mind Map Overview</a> page. <br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/><br/> <b>Known limitations on node placement: </b> Currently, the create API supports explicit positions for nodes. This means that users can only place nodes based on the x, y coordinates provided in the position parameters. If the position is not provided in the request, nodes default to coordinates x=0, y=0, effectively placing them at the center of the board. <br /><br /><b>Upcoming changes:</b> We understand the importance of flexibility in node placement. We are actively working on implementing changes to support positioning nodes relative to their parent node as well. This enhancement offers a more dynamic and intuitive mind mapping experience. <br /><br />Additionally, we are actively working on providing the update API, further enhancing the functionality of mind map APIs.
         */
        post: operations["create-mindmap-nodes-experimental"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/boards/{board_id}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items on board
         * @description Retrieves a list of items for a specific board. You can retrieve all items on the board, a list of child items inside a parent item, or a list of specific types of items by specifying URL query parameter values.
         *
         *     This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request. For example, if you set the `limit` query parameter to `10` and the board contains 20 objects, the first call will return information about the first 10 objects in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        get: operations["get-items-experimental"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/boards/{board_id}/items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get specific item on board
         * @description Retrieves information for a specific item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-specific-item-experimental"];
        put?: never;
        post?: never;
        /**
         * Delete item
         * @description Deletes an item from a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-item-experimental"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/boards/{board_id}/shapes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create shape item
         * @description Adds a flowchart shape item to a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-shape-item-flowchart"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2-experimental/boards/{board_id}/shapes/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get shape item
         * @description Retrieves information for a specific shape item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-shape-item-flowchart"];
        put?: never;
        post?: never;
        /**
         * Delete shape item
         * @description Deletes a flowchart shape item from the board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["delete-shape-item-flowchart"];
        options?: never;
        head?: never;
        /**
         * Update shape item
         * @description Updates a flowchart shape item on a board based on the data and style properties provided in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-shape-item-flowchart"];
        trace?: never;
    };
    "/v2/boards/{board_id_PlatformFileUpload}/documents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create document item using file from device
         * @description Adds a document item to a board by selecting file from device.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-document-item-using-file-from-device"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id_PlatformFileUpload}/documents/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update document item using file from device
         * @description Updates a document item on a board by using file from a device.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-document-item-using-file-from-device"];
        trace?: never;
    };
    "/v2/boards/{board_id_PlatformFileUpload}/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create image item using file from device
         * @description Adds an image item to a board by specifying a file from device.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["create-image-item-using-local-file"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id_PlatformFileUpload}/images/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update image item using file from device
         * @description Updates an image item on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        patch: operations["update-image-item-using-file-from-device"];
        trace?: never;
    };
    "/v2/boards/{board_id}/groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all groups on a board
         * @description Returns all the groups and the items of the respective groups within a specific board.<br/> This method returns results using a cursor-based approach. A cursor-paginated  method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request.<br/> For example, if you set the `limit` query parameter to `10` and the board  contains 20 items that are a part of a group, the first call will return information about the first 10 items in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        get: operations["get-all-groups"];
        put?: never;
        /**
         * Create group
         * @description Creates a group of items on a board. The group is created with the items that are passed in the request body.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        post: operations["createGroup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/groups/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items of a group by ID
         * @description Returns a list of items that are a part of any group, within a specific board.<br/> This method returns results using a cursor-based approach. A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, on your next call to the same method, set the `cursor` parameter equal to the `cursor` value you received in the response of the previous request.<br/> For example, if you set the `limit` query parameter to `10` and the board  contains 20 items that are a part of a group, the first call will return information about the first 10 items (not 10 groups) in the response along with a cursor parameter and value. In this example, let's say the cursor parameter value returned in the response is `foo`. If you want to retrieve the next set of objects, on your next call to the same method, set the cursor parameter value to `foo`.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        get: operations["getItemsByGroupId"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/groups/{group_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a group by its ID
         * @description Returns a list of items in a specific group. <br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a>
         *     <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> per item ID
         */
        get: operations["getGroupById"];
        /**
         * Updates a group with new items
         * @description This endpoint updates an existing group by replacing it entirely with a new group.  When the update is made, the original group is completely replaced, and a new group ID is assigned. <br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a><br/>
         */
        put: operations["updateGroup"];
        post?: never;
        /**
         * Ungroup items
         * @description Ungroups items from a group.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["unGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/groups/{group_id}?": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Deletes the group
         * @description Deletes a group from a board. All the items in the groups are deleted along with the group.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 3</a><br/>
         */
        delete: operations["deleteGroup"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/oauth/revoke": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Revoke token (v2)
         * @description Revoke the current access token. Revoking an access token means that the access token will no longer work. When an access token is revoked, the refresh token is also revoked and no longer valid. This does not uninstall the application for the user.
         */
        post: operations["revoke-token-v2"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/items/{item_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tags from item
         * @description Retrieves all the tags from the specified item.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-tags-from-item"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/tags": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tags from board
         * @description Retrieves all the tags from the specified board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-tags-from-board"];
        put?: never;
        /**
         * Create tag
         * @description Creates a tag on a board.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        post: operations["create-tag"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id}/tags/{tag_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get tag
         * @description Retrieves information for a specific tag.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-tag"];
        put?: never;
        post?: never;
        /**
         * Delete tag
         * @description Deletes the specified tag from the board. The tag is also removed from all cards and sticky notes on the board. <br><blockquote><strong>Note:</strong> Updates to tags made via the REST API  will not be reflected on the board in realtime. To see REST API updates to tags on a board,  you need to refresh the board. This applies to the following endpoints:  [Attach tag to item](https://developers.miro.com/reference/attach-tag-to-item),  [Remove tag from item](https://developers.miro.com/reference/remove-tag-from-item),  [Update tag](https://developers.miro.com/reference/update-tag).</blockquote><br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        delete: operations["delete-tag"];
        options?: never;
        head?: never;
        /**
         * Update tag
         * @description Updates a tag based on the data properties provided in the request body. <br><blockquote><strong>Note:</strong> Updates to tags made via the REST API  will not be reflected on the board in realtime. To see REST API updates to tags on a board,  you need to refresh the board. This applies to the following endpoints:  [Attach tag to item](https://developers.miro.com/reference/attach-tag-to-item),  [Remove tag from item](https://developers.miro.com/reference/remove-tag-from-item),   [Delete tag](https://developers.miro.com/reference/delete-tag).</blockquote><br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        patch: operations["update-tag"];
        trace?: never;
    };
    "/v2/boards/{board_id_PlatformTags}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get items by tag
         * @description Retrieves all the items that have the specified tag.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        get: operations["get-items-by-tag"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/boards/{board_id_PlatformTags}/items/{item_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach tag to item
         * @description Attach an existing tag to the specified item. Card and sticky note items can have up to 8 tags. <br><blockquote><strong>Note:</strong> Updates to tags made via the REST API  will not be reflected on the board in realtime. To see REST API updates to tags on a board,  you need to refresh the board. This applies to the following endpoints:   [Remove tag from item](https://developers.miro.com/reference/remove-tag-from-item),  [Update tag](https://developers.miro.com/reference/update-tag),  [Delete tag](https://developers.miro.com/reference/delete-tag).</blockquote><br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        post: operations["attach-tag-to-item"];
        /**
         * Remove tag from item
         * @description Removes the specified tag from the specified item. The tag still exists on the board. <br><blockquote><strong>Note:</strong> Updates to tags made via the REST API  will not be reflected on the board in realtime. To see REST API updates to tags on a board,  you need to refresh the board. This applies to the following endpoints:  [Attach tag to item](https://developers.miro.com/reference/attach-tag-to-item),   [Update tag](https://developers.miro.com/reference/update-tag),  [Delete tag](https://developers.miro.com/reference/delete-tag).</blockquote><br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>boards:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a><br/>
         */
        delete: operations["remove-tag-from-item"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/projects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of projects
         * @description Retrieves the list of projects in an existing team of an organization. You can retrieve all projects, including all private projects (projects that haven't been specifically shared with you) by enabling Content Admin permissions. To enable Content Admin permissions, see [Content Admin permissions for Company Admins](https://help.miro.com/hc/en-us/articles/360012777280-Content-Admin-permissions-for-Company-Admins).<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-projects"];
        put?: never;
        /**
         * Create project
         * @description Projects are essentially folders of boards with the option to manage user access for a smaller group of people within a team. Projects are here to help you organize your boards and make them easier to find and share. In other words, a project is a group of boards that you can share with your teammates all at once. For more information, see our <a href="https://help.miro.com/hc/en-us/articles/360018262033-Projects" target=_blank>Help Center page on Projects</a>. <br><br>This API creates a new project in an existing team of an organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        post: operations["enterprise-create-project"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/projects/{project_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project
         * @description Retrieves project information, such as a name for an existing project.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-project"];
        put?: never;
        post?: never;
        /**
         * Delete project
         * @description Deletes a project. After a project is deleted, all boards and users that belong to the project remain in the team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        delete: operations["enterprise-delete-project"];
        options?: never;
        head?: never;
        /**
         * Update project
         * @description Update information about a project, such as the project name.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        patch: operations["enterprise-update-project"];
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/projects/{project_id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project settings
         * @description Retrieves the project settings.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-project-settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update project settings
         * @description Updates the settings of a project.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        patch: operations["enterprise-update-project-settings"];
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/projects/{project_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List of project members
         * @description Retrieves the list of members for a specific project.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-project-members"];
        put?: never;
        /**
         * Add member in a project
         * @description Add a Miro user to a project.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        post: operations["enterprise-add-project-member"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/projects/{project_id}/members/{member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get project member
         * @description Retrieves information for a specific project member.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-project-member"];
        put?: never;
        post?: never;
        /**
         * Remove project member
         * @description Remove a member from a project. The user remains in the team even after the member is removed from a project.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        delete: operations["enterprise-delete-project-member"];
        options?: never;
        head?: never;
        /**
         * Update project member
         * @description Updates details of a project member, such as the member's role.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>projects:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        patch: operations["enterprise-update-project-member"];
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List teams
         * @description Retrieves list of teams in an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-teams"];
        put?: never;
        /**
         * Create team
         * @description Creates a new team in an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        post: operations["enterprise-create-team"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team
         * @description Retrieves team information for an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-team"];
        put?: never;
        post?: never;
        /**
         * Delete team
         * @description Deletes an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 4</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        delete: operations["enterprise-delete-team"];
        options?: never;
        head?: never;
        /**
         * Update team
         * @description Updates an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        patch: operations["enterprise-update-team"];
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/members": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List team members
         * @description Retrieves team members by cursor.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-team-members"];
        put?: never;
        /**
         * Invite team members
         * @description Invites a new Miro user to an existing team. The user must exist in your Miro organization. Users who do not exist in your Miro organization can be invited to the team via [SCIM](https://developers.miro.com/docs/scim) and an external identity provider, such as Okta or Azure Active Directory.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        post: operations["enterprise-invite-team-member"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/members/{member_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team member
         * @description Retrieves team member by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-team-member"];
        put?: never;
        post?: never;
        /**
         * Delete team member from team
         * @description Deletes team member from team by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        delete: operations["enterprise-delete-team-member"];
        options?: never;
        head?: never;
        /**
         * Update team member
         * @description Updates team member role in team by id.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        patch: operations["enterprise-update-team-member"];
        trace?: never;
    };
    "/v2/orgs/{org_id}/default_teams_settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get default team settings
         * @description Retrieves default team settings of an existing organization.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-default-team-settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v2/orgs/{org_id}/teams/{team_id}/settings": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get team settings
         * @description Retrieves team settings of an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:read</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 1</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        get: operations["enterprise-get-team-settings"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Update team settings
         * @description Updates team settings of an existing team.<br/><h3>Required scope</h3> <a target=_blank href=https://developers.miro.com/reference/scopes>organizations:teams:write</a> <br/><h3>Rate limiting</h3> <a target=_blank href="/docs/miro-rest-api-introduction#rate-limiting">Level 2</a> <br/><h3>Enterprise only</h3> <p>This API is available only for <a target=_blank href="/reference/api-reference#enterprise-plan">Enterprise plan</a> users. You can only use this endpoint if you have the role of a Company Admin. You can request temporary access to Enterprise APIs using <a target=_blank href="https://q2oeb0jrhgi.typeform.com/to/BVPTNWJ9">this form</a>.</p>
         */
        patch: operations["enterprise-update-team-settings"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        AuditPage: {
            /**
             * @description Type of the response, in this case it's always 'cursor-list'
             * @example cursor-list
             */
            type?: string;
            /**
             * @description Page limit
             * @example 10
             */
            limit?: number;
            /**
             * @description Item count in current page
             * @example 2
             */
            size?: number;
            /**
             * @description The key that should be used as the cursor request parameter to fetch the next page
             * @example 2023-09-01T09:30:10.840687Z#1234567890123456789-DDB
             */
            cursor?: string;
            /** @description Audit events list */
            data?: components["schemas"]["AuditEvent"][];
        };
        AuditEvent: {
            /**
             * @description Audit event id
             * @example 2023-09-01T09:30:10.840687Z#1234567890123456789-DDB
             */
            id?: string;
            context?: components["schemas"]["AuditContext"];
            object?: components["schemas"]["AuditObject"];
            /**
             * Format: date-time
             * @description Time when the audit event has been created
             * @example 2023-09-01T09:30:10.840+0000
             */
            createdAt?: string;
            /**
             * @description Details json related to the audit event
             * @example { "authType": "SSO", "mfaFactorType": "NONE" }
             */
            details?: Record<string, never>;
            createdBy?: components["schemas"]["AuditCreatedBy"];
            /**
             * @description Event type of the audit event
             * @example sign_in_succeeded
             */
            event?: string;
            /**
             * @description Event category of the audit event.
             * @example authentication
             */
            category?: string;
        };
        /** @description Audit context */
        AuditContext: {
            /**
             * @description Ip address associated with the audit context
             * @example 0.0.0.0
             */
            ip?: string;
            team?: components["schemas"]["AuditTeam"];
            organization?: components["schemas"]["AuditOrganization"];
        };
        /** @description Team associated with the audit context */
        AuditTeam: {
            /**
             * @description Id of the team
             * @example 1234567890123456789
             */
            id?: string;
            /**
             * @description Name of the team
             * @example Example Team
             */
            name?: string;
        };
        /** @description Organization associated with the audit context */
        AuditOrganization: {
            /**
             * @description Id of the organization
             * @example 1234567890123456789
             */
            id?: string;
            /**
             * @description Name of the organization
             * @example Example Organization
             */
            name?: string;
        };
        /** @description The object related with the audit event */
        AuditObject: {
            /**
             * @description Id of the object
             * @example 1234567890123456789
             */
            id?: string;
            /**
             * @description Name of the object
             * @example Example Object
             */
            name?: string;
        };
        /** @description The details regarding the creator of the audit event */
        AuditCreatedBy: {
            /**
             * @description Type of the creator
             * @example user
             * @enum {string}
             */
            type?: "user" | "application" | "scim_provisioner" | "miro_automation";
            /**
             * @description Id of the creator
             * @example 1234567890123456789
             */
            id?: string;
            /**
             * @description Name of the creator
             * @example John Smith
             */
            name?: string;
            /**
             * @description Email of the creator
             * @example john.smith@miro.com
             */
            email?: string;
        };
        BoardDataClassificationLabel: {
            /**
             * @description Label color.
             * @example blue
             */
            color?: string;
            /**
             * @description Label description.
             * @example Board could not be shared publicly
             */
            description?: string;
            /**
             * @description Label id.
             * @example 3000457366756290996
             */
            id?: string;
            /**
             * @description Label name.
             * @example internal
             */
            name?: string;
            /**
             * @description Sharing Recommendation (one of NO_SHARING_RESTRICTIONS, ONLY_WITHIN_ORGANIZATION, ONLY_WITHIN_TEAM or ONLY_WITH_AUTHORIZED_TEAM_MEMBERS ).
             * @example NO_SHARING_RESTRICTIONS
             */
            sharingRecommendation?: string;
            /**
             * @description Indicates the URL for the board classification label guidelines.
             * @example https://miro.com
             */
            guidelineUrl?: string;
            /**
             * @description Type of the object returned.
             * @default board-data-classification-label
             */
            type: string;
        };
        /** @description Data classification label */
        DataClassificationLabel: {
            /**
             * @description Label id.
             * @example 3000457366756290996
             */
            id?: string;
            /**
             * @description Label color.
             * @example #F5DC80
             */
            color?: string;
            /**
             * @description Label is default.
             * @example false
             */
            default?: boolean;
            /**
             * @description Label description.
             * @example Board could not be shared publicly
             */
            description?: string;
            /**
             * @description Label name.
             * @example internal
             */
            name?: string;
            /**
             * Format: int32
             * @description Label order number.
             * @example 2
             */
            orderNumber?: number;
            /**
             * @description Sharing Recommendation (one of NO_SHARING_RESTRICTIONS, ONLY_WITHIN_ORGANIZATION, ONLY_WITHIN_TEAM or ONLY_WITH_AUTHORIZED_TEAM_MEMBERS ).
             * @example NO_SHARING_RESTRICTIONS
             */
            sharingRecommendation?: string;
            /**
             * @description Indicates the URL for the board classification label guidelines.
             * @example https://miro.com
             */
            guidelineUrl?: string;
            /**
             * @description Type of the object returned.
             * @default data-classification-label
             */
            type: string;
        };
        DataClassificationLabelId: {
            /**
             * @description Data classification label id
             * @example 3000457366756290996
             */
            labelId?: string;
        };
        DataClassificationOrganizationSettings: {
            /**
             * @description Data classification enabled for organization
             * @example true
             */
            enabled?: boolean;
            /** @description Data classification labels */
            labels?: components["schemas"]["DataClassificationLabel"][];
            /**
             * @description Type of the object returned.
             * @default data-classification-organization-settings
             */
            type: string;
        };
        DataClassificationTeamSettings: {
            /**
             * @description Data classification default label id
             * @example 3000457366756290996
             */
            defaultLabelId?: string;
            /**
             * @description Data classification enabled for team
             * @example true
             */
            enabled?: boolean;
            /**
             * @description Type of the object returned.
             * @default team-data-classification-settings
             */
            type: string;
        };
        UpdateBoardsDataClassificationLabel: {
            /**
             * Format: int64
             * @description Number of boards updated in the team
             * @example 10
             */
            numberUpdatedBoards?: number;
            /**
             * @description Type of the object returned.
             * @default boards-data-classification-label-changed
             */
            type: string;
        };
        UpdateBoardsDataClassificationLabelRequest: {
            /**
             * Format: int64
             * @description Data classification label id for team
             * @example 3000457366756291000
             */
            labelId?: number;
            /**
             * @description Assign data classification label to not-classified only or to all boards of team
             * @example true
             */
            notClassifiedOnly?: boolean;
        };
        UpdateTeamSettingsRequest: {
            /**
             * Format: int64
             * @description Data classification default label id
             * @example 3000457366756291000
             */
            defaultLabelId?: number;
            /**
             * @description Data classification enabled for team
             * @example true
             */
            enabled?: boolean;
        };
        CaseRequest: {
            /**
             * @description The name of the case
             * @example My Case
             */
            name: string;
            /**
             * @description The description of the case
             * @example Info about my case
             */
            description?: string;
        };
        CaseResponse: {
            /**
             * @description Unique identifier of the case.
             * @example 3074457345619012007
             */
            id: string;
            /**
             * @description Unique identifier of the organization.
             * @example 3074457345618265000
             */
            organizationId: string;
            /**
             * @description The name of the case.
             * @example My Case
             */
            name: string;
            /**
             * @description The description of the case.
             * @example Info about my case
             */
            description?: string;
            createdBy: components["schemas"]["User"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            lastModifiedAt: string;
        };
        LegalHoldRequest: {
            /**
             * @description The name of the legal hold.
             * @example My legal hold
             */
            name: string;
            /**
             * @description The description of the legal hold.
             * @example Info about my legal hold
             */
            description?: string;
            scope: components["schemas"]["LegalHoldRequestScope"];
        };
        /** @description The legal hold scope determines the criteria used to put content items under hold. The variants of this field might get extended in the future, although the most common use case is to put users under hold. Currently only the `users` scope is supported. However, the parsing of this field must ignore unexpected variants. */
        LegalHoldRequestScope: components["schemas"]["LegalHoldRequestScopeUsers"];
        /** Users */
        LegalHoldRequestScopeUsers: {
            users?: {
                /**
                 * @description Email of the user
                 * @example john.smith@example.com
                 */
                email: string;
            }[];
        };
        LegalHoldResponse: {
            /**
             * @description Unique identifier of the legal hold.
             * @example 3074457345618265000
             */
            id: string;
            /**
             * @description Unique identifier of the organization.
             * @example 3074457345618265000
             */
            organizationId: string;
            /**
             * @description Unique identifier of the case.
             * @example 3074457345618265000
             */
            caseId: string;
            /**
             * @description The name of the legal hold.
             * @example My legal hold
             */
            name: string;
            /**
             * @description The description of the legal hold.
             * @example Info about my legal hold
             */
            description?: string;
            state: components["schemas"]["LegalHoldState"];
            scope: components["schemas"]["LegalHoldResponseScope"];
            createdBy: components["schemas"]["User"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            lastModifiedAt: string;
        };
        /** @description The legal hold scope determines the criteria used to put content items under hold. The variants of this field might get extended in the future, although the most common use case is to put users under hold. Currently only the `users` scope is supported. However, the parsing of this field must ignore unexpected variants. */
        LegalHoldResponseScope: components["schemas"]["LegalHoldResponseScopeUsers"];
        /**
         * Users scope
         * @description List of users under legal hold.
         */
        LegalHoldResponseScopeUsers: {
            users?: components["schemas"]["User"][];
        };
        /** @description List of content items under legal hold. */
        PaginatedLegalHoldContentItemsResponse: components["schemas"]["Pagination"] & {
            data?: components["schemas"]["LegalHoldContentItemsResponse"][];
        };
        LegalHoldContentItemsResponse: {
            /**
             * @description Unique identifier of the content item.
             * @example 3074457345821141000
             */
            id: string;
            /**
             * @description Identifier for the piece of content referenced by a content item. In the case of a board, this represents the `boardKey` and can be used to export a board using the Discovery APIs.
             * @example uXjVOD6LSME=
             */
            contentId?: string;
            /**
             * @description Type of the content item that is returned.
             *
             * @example board
             */
            type: string;
        };
        /**
         * @description The state of the legal hold. Legal holds could take up to 24 hours to be processed and the state could be one of the following:
         *     - `PROCESSING`: the legal hold is being created and content items are being processed.
         *     - `ACTIVE`: the legal hold has been created and all content items have been processed.
         *     - `DELETING`: the legal hold is being deleted and content items are being processed.
         *
         * @enum {string}
         */
        LegalHoldState: "PROCESSING" | "ACTIVE" | "DELETING";
        /** @description User information. */
        User: {
            /**
             * @description Unique identifier of the user.
             * @example 3458764517517852417
             */
            id: string;
            /**
             * @description User email.
             * @example john.smith@example.com
             */
            email: string;
            /**
             * @description First name of the user.
             * @example John
             */
            firstName: string;
            /**
             * @description Last name of the user.
             * @example Smith
             */
            lastName: string;
        };
        PaginatedCaseResponse: components["schemas"]["Pagination"] & {
            data?: components["schemas"]["CaseResponse"][];
        };
        PaginatedLegalHoldResponse: components["schemas"]["Pagination"] & {
            data?: components["schemas"]["LegalHoldResponse"][];
        };
        Pagination: {
            /**
             * Format: int32
             * @description Number of results returned in the response considering the cursor and the limit values sent in the request. For example, if there are 20 results, the request does not have a cursor value, and the limit set to 10, the size of the results will be 10. In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             *
             * @example 1
             */
            size?: number;
            /**
             * Format: int32
             * @description Total number of results in the collection.
             * @example 15
             */
            total?: number;
            cursor?: components["schemas"]["PageCursor"];
            /** @description The maximum number of results to return per call. If the number of items in the response is
             *     greater than the limit specified, the response returns the cursor parameter with a value.
             *      */
            limit?: components["schemas"]["PageLimit"];
            /**
             * @description Type of the response, in this case it's always 'cursor-list'.
             * @default cursor-list
             */
            type: string;
        };
        BoardExportJobId: {
            /**
             * Format: uuid
             * @description Unique identifier of the board export job.
             * @example 92343229-c532-446d-b8cb-2f155bedb807
             */
            jobId: string;
        };
        BoardExportJobStatus: {
            /**
             * @description Indicates the current state of the board export job.
             *     Possible values:
             *     `CREATED`: the job has been created but not yet started. Retry the status call after some time.
             *     `IN_PROGRESS`: the job is in progress, and the results are not ready yet. Retry the status call after some time.
             *     `FINISHED`: the job is complete. You can now get results for the board export job.
             * @example CREATED
             */
            jobStatus: string;
        };
        BoardExportResult: {
            /**
             * Format: uuid
             * @description Unique identifier of the board export job.
             * @example 92343229-c532-446d-b8cb-2f155bedb807
             */
            jobId?: string;
            /** @description Board export task results. */
            results?: components["schemas"]["BoardExportTaskResult"][];
        };
        /** @description Board export task results. */
        BoardExportTaskResult: {
            /**
             * @description Unique identifier of the board.
             * @example o9J_kzlUDmo=
             */
            boardId: string;
            /** @description Contains the description of the error that occurred during a board export task. */
            errorMessage?: string;
            /** @description URL of the S3 bucket that contains the exported files. */
            exportLink?: string;
            /**
             * @description Indicates the status of the individual board export task.
             *     Possible values:
             *     `SUCCESS`: the board export task was completed successfully and the results are available.
             *     `ERROR`: the board export task encountered an error and failed to complete. The `errorMessage` field provides more information on the error.
             * @example CREATED
             */
            status: string;
            /**
             * @description Indicates the type of error encountered during the board export task.
             *     Possible values:
             *     `TEMPORARY`: the board export task encountered a temporary error. Retry the board export task after some time.
             *     `FATAL`: the board export failed and cannot be retried. This export will never succeed due to issues such as board corruption, non-existence, or other unrecoverable errors. Please verify the board's state or contact support if assistance is needed.
             *     `UNKNOWN`: the board export task encountered an unexpected exception. Retry the board export task after some time.
             * @example TEMPORARY
             */
            errorType?: string;
        };
        /** @description List of board IDs to be exported. */
        CreateBoardExportRequest: {
            /**
             * @description List of board IDs to be exported.
             * @example o9J_kzlUDmo=
             */
            boardIds?: string[];
            /**
             * @description Specifies the format of the file to which the board will be exported. Supported formats include SVG (default), HTML, and PDF.
             * @default SVG
             * @example SVG
             * @enum {string}
             */
            boardFormat: "SVG" | "HTML" | "PDF";
        };
        /** @description Response for query using cursor and filter parameters. */
        GetBoardItemContentLogsResponse: {
            /**
             * Format: int32
             * @description The maximum number of results to return per call. If the number of logs in the response is
             *     greater than the limit specified, the response returns the cursor parameter with a value.
             *
             * @example 20
             */
            limit?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response considering the cursor and the limit values sent in the request. For example, if there are 20 results, the request does not have a cursor value, and the limit set to 10, the size of the results will be 10. In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             *
             * @example 1
             */
            size?: number;
            data?: components["schemas"]["BoardItemContentLogList"];
            /**
             * @description Indicator of the position of the next page of the result. To retrieve the next page, make another query setting its cursor field to the value returned by the current query. If the value is empty, there are no more pages to fetch.
             *
             * @example MTY2OTg4NTIwMDAwMHwxMjM=
             */
            cursor?: string;
            /**
             * @description Type of the object returned.
             * @default cursor-list
             */
            type: string;
        };
        /** @description Contains the list of content logs for a board item. */
        BoardItemContentLogList: components["schemas"]["BoardItemContentLog"][];
        /** @description Contains information about the content log of for a board item. */
        BoardItemContentLog: {
            /**
             * @description Unique identifier of the content log.
             * @example 2dcf57ff-f12c-4fad-b708-c1642204b41b
             */
            id?: string;
            /**
             * @description Unique identifier of the board where the action happened.
             * @example o9J_kzlUDmo=
             */
            contentId?: string;
            /**
             * @description Type of action within the board, such as creation of a widget, update of a comment message, and so on.
             * @example update
             * @enum {string}
             */
            actionType?: "create" | "update" | "delete";
            /**
             * Format: date-time
             * @description Date and time when the action happened.<br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             *
             * @example 2023-06-24T17:32:28Z
             */
            actionTime?: string;
            actor?: components["schemas"]["Actor"];
            /**
             * @description Type of the board item on which the action happened.
             * @example widget
             * @enum {string}
             */
            itemType?: "widget" | "comment_thread" | "comment_message";
            /**
             * @description Unique identifier of the board item on which the action happened. For example, the widget ID.
             * @example 3458764549483493025
             */
            itemId?: string;
            state?: components["schemas"]["State"];
        };
        /** @description Contains information about the user who performed the action. */
        Actor: {
            /**
             * @description Unique identifier of the user who performed the action.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Email of the user who performed the action.
             * @example john.smith.demo@miro.com
             */
            email?: string;
            /**
             * @description Name of the user who performed the action.
             * @example John Smith
             */
            name?: string;
        };
        /** @description Object that contains information about the state of the board item after the action was performed. */
        State: Record<string, never>;
        BasicErrorEnterpriseUserSessionResetEnterprisePlan: {
            /** @description HTTP status code. */
            status?: number;
            /** @description Description of the status code. */
            code?: string;
            /** @description Explanation for the error */
            message?: string;
            /**
             * @description Type of the object returned.
             * @default error
             */
            type: string;
        };
        BasicErrorOrganizationsEnterprisePlan: {
            /** @description HTTP status code. */
            status?: number;
            /** @description Description of the status code. */
            code?: string;
            /** @description Explanation for the error */
            message?: string;
            /**
             * @description Type of the object returned.
             * @default error
             */
            type: string;
        };
        Organization: {
            /**
             * @description Id of the organization
             * @example 3074457345821140946
             */
            id: string;
            /**
             * Format: int32
             * @description Purchased FULL licenses
             */
            fullLicensesPurchased: number;
            /**
             * @description Name of the organization
             * @example Miro company
             */
            name: string;
            /**
             * @description Organization plan type
             * @example company
             * @enum {string}
             */
            plan: "company" | "consultant" | "consultant_slf" | "business" | "paid_team_org" | "integration_org" | "professional_2022" | "edu_team_org" | "free_team_org" | "dev_team_org" | "unknown";
            /**
             * @description Type of the object returned.
             * @default organization
             */
            type: string;
        };
        /** @description Organization member */
        OrganizationMember: {
            /**
             * @description Id of the user
             * @example 3074457345821140934
             */
            id: string;
            /**
             * @description Indicates if a user is active or deactivated. Learn more about <a target="blank" href="https://help.miro.com/hc/en-us/articles/360025025894-Deactivated-users">user deactivation</a>.
             * @example true
             */
            active: boolean;
            /**
             * @description User email
             * @example user@miro.com
             */
            email: string;
            /**
             * Format: date-time
             * @description Date and time when the user was last active. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)). If the user never logged in, the parameter value is empty.
             *
             */
            lastActivityAt?: string;
            /**
             * @description Name of the current user license in the organization
             * @example full
             * @enum {string}
             */
            license: "full" | "occasional" | "free" | "free_restricted" | "full_trial" | "unknown";
            /**
             * Format: date-time
             * @description Time when the license was assigned to the user
             */
            licenseAssignedAt?: string;
            /**
             * @description Name of the user role in the organization
             * @example organization_internal_user
             * @enum {string}
             */
            role: "organization_internal_admin" | "organization_internal_user" | "organization_external_user" | "organization_team_guest_user" | "unknown";
            /**
             * @description Type of the object returned.
             * @default organization-member
             */
            type: string;
            /** @description List of admin roles assigned to the user */
            adminRoles?: components["schemas"]["AdminRole"][];
        };
        /** @description Response for search organization members by user emails */
        OrganizationMembersSearchByEmailsResponse: components["schemas"]["OrganizationMember"][];
        /** @description Response for query by cursor and filter parameters */
        OrganizationMembersSearchResponse: {
            /**
             * Format: int32
             * @description Maximum number of results returned based on the limit specified in the request. For example, if there are 20 results, the request has no cursor value, and the limit is set to 20, the size of the results will be 20. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the cursor parameter value.
             * @example 20
             */
            limit?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response considering the cursor and the limit values sent in the request. For example, if there are 20 results, the request does not have a cursor value, and the limit set to 10, the size of the results will be 10.
             * @example 1
             */
            size?: number;
            data?: components["schemas"]["OrganizationMember"][];
            /**
             * @description Indicator of the position of the next page of the result. To retrieve the next page, make another query setting its cursor field to the value returned by the current query. If the value is empty, there are no more pages to fetch.
             * @example 3074457345821140946
             */
            cursor?: string;
            /**
             * @description Type of the object returned.
             * @default cursor-list
             */
            type: string;
        };
        AdminRole: {
            /**
             * @description Type of the admin role prebuilt or custom
             * @example prebuilt
             * @enum {string}
             */
            type?: "prebuilt" | "custom";
            /**
             * @description Name of the admin role
             * @example User Admin
             */
            name?: string;
        };
        AppCardCreateRequest: {
            data?: components["schemas"]["AppCardDataChanges"];
            style?: components["schemas"]["AppCardStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains app card item data, such as the title, description, or fields. */
        AppCardDataChanges: {
            /**
             * @description A short text description to add context about the app card.
             * @example Sample app card description
             */
            description?: string;
            /** @description Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view. */
            fields?: components["schemas"]["CustomField"][];
            /**
             * @description Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.
             * @default disconnected
             * @enum {string}
             */
            status: "disconnected" | "connected" | "disabled";
            /**
             * @description A short text header to identify the app card.
             * @default sample app card item
             */
            title: string;
        };
        AppCardItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["AppCardData"];
            style?: components["schemas"]["AppCardStyle"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example app_card
             */
            type: string;
        };
        /** @description Contains information about the style of an app card item, such as the fill color. */
        UpdateAppCardStyle: {
            /**
             * @description Hex value of the border color of the app card.
             * @example #2d9bf0
             */
            fillColor?: string;
        };
        AppCardUpdateRequest: {
            data?: components["schemas"]["AppCardDataChanges"];
            style?: components["schemas"]["UpdateAppCardStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains the result data. */
        Board: {
            /**
             * Format: date-time
             * @description Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserInfoShort"];
            currentUserMembership?: components["schemas"]["BoardMember"];
            /**
             * @description Description of the board.
             * @example Sample board description
             */
            description: string;
            /**
             * @description Unique identifier (ID) of the board.
             * @example uXjVOD6LSME=
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the board was last opened by any user. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            lastOpenedAt?: string;
            lastOpenedBy?: components["schemas"]["UserInfoLastOpenedBy"];
            /**
             * Format: date-time
             * @description Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserInfoShort"];
            /**
             * @description Name of the board.
             * @example Sample board name
             */
            name: string;
            owner?: components["schemas"]["UserInfoShort"];
            picture?: components["schemas"]["Picture"];
            policy?: components["schemas"]["BoardPolicy"];
            team?: components["schemas"]["Team"];
            project?: components["schemas"]["BoardProject"];
            /**
             * @description Type of the object that is returned. In this case, type returns `board`.
             * @example board
             */
            type: string;
            /**
             * @description URL to view the board.
             * @example https://miro.com/app/board/uXjVOD6LSME=
             */
            viewLink?: string;
        };
        BoardChanges: {
            /** @description Description of the board. */
            description?: string;
            /**
             * @description Name for the board.
             * @default Untitled
             */
            name: string;
            policy?: components["schemas"]["BoardPolicyChange"];
            /** @description Unique identifier (ID) of the team where the board must be placed. */
            teamId?: string;
            /** @description Unique identifier (ID) of the project to which the board must be added. */
            projectId?: string;
        };
        CopyBoardChanges: {
            /** @description Description of the board. */
            description?: string;
            /**
             * @description Name for the board.
             * @default Untitled
             */
            name: string;
            policy?: components["schemas"]["BoardPolicyChange"];
            /** @description Unique identifier (ID) of the team where the board must be placed. */
            teamId?: string;
        };
        /** @description Contains applicable links for the board. */
        BoardLinks: {
            /**
             * @description Link to obtain information about the board members associated with the board.
             * @example http://api.miro.com/v2/boards/o9J_k1JKioQ=/members?limit=20&offset=0
             */
            related?: string;
            /**
             * @description Link to obtain information about the current board.
             * @example http://api.miro.com/v2/boards/o9J_k1JKioQ=
             */
            self?: string;
        };
        /** @description Contains the current user's board membership details. The current user could be different from the board owner. */
        BoardMember: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3074457353169356300
             */
            id: string;
            /**
             * @description Name of the user.
             * @example John Smith
             */
            name: string;
            /**
             * @description Role of the board member.
             * @enum {string}
             */
            role?: "viewer" | "commenter" | "editor" | "coowner" | "owner";
            /**
             * @description Type of the object that is returned. In this case, `type` returns `board_member`.
             * @example board_member
             */
            type: string;
        };
        BoardMemberChanges: {
            /**
             * @description Role of the board member.
             * @default commenter
             * @enum {string}
             */
            role: "viewer" | "commenter" | "editor" | "coowner" | "owner";
        };
        BoardMemberWithLinks: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3074457353169356300
             */
            id: string;
            /**
             * @description Name of the user.
             * @example John Smith
             */
            name: string;
            /**
             * @description Role of the board member.
             * @enum {string}
             */
            role?: "viewer" | "commenter" | "editor" | "coowner" | "owner";
            links?: components["schemas"]["SelfLink"];
            /**
             * @description Type of the object that is returned. In this case, `type` returns `board_member`.
             * @example board_member
             */
            type: string;
        };
        BoardMembersInvite: {
            /** @description Email IDs of the users you want to invite to the board. You can invite up to 20 members per call. */
            emails: string[];
            /**
             * @description Role of the board member. Inviting users with the role `owner` has the same effect as the role `coowner`.
             * @default commenter
             * @enum {string}
             */
            role: "viewer" | "commenter" | "editor" | "coowner" | "owner";
            /**
             * @description The message that will be sent in the invitation email.
             * @example Hey there! Join my board and let's collaborate on this project!
             */
            message?: string;
        };
        BoardMembersPagedResponse: {
            /** @description Contains the result data. */
            data?: components["schemas"]["BoardMember"][];
            /**
             * Format: int64
             * @description Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).
             * @example 1
             */
            total?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.
             * @example 1
             */
            size?: number;
            /**
             * Format: int32
             * @description Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.
             * @example 0
             */
            offset?: number;
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.
             *
             * @example 20
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
            type?: string;
        };
        /** @description Defines the permissions policies for the board. */
        BoardPermissionsPolicy: {
            /**
             * @description Defines who can start or stop timer, voting, video chat, screen sharing, attention management. Others will only be able to join. To change the value for the `collaborationToolsStartAccess` parameter, contact Miro Customer Support.
             * @default all_editors
             * @enum {string}
             */
            collaborationToolsStartAccess: "all_editors" | "board_owners_and_coowners";
            /**
             * @description Defines who can copy the board, copy objects, download images, and save the board as a template or PDF.
             * @default anyone
             * @enum {string}
             */
            copyAccess: "anyone" | "team_members" | "team_editors" | "board_owner";
            /**
             * @description Defines who can change access and invite users to this board. To change the value for the `sharingAccess` parameter, contact Miro Customer Support.
             * @default team_members_with_editing_rights
             * @enum {string}
             */
            sharingAccess: "team_members_with_editing_rights" | "owner_and_coowners";
        };
        /** @description Defines the permissions policies and sharing policies for the board. */
        BoardPolicy: {
            permissionsPolicy?: components["schemas"]["BoardPermissionsPolicy"];
            sharingPolicy?: components["schemas"]["BoardSharingPolicy"];
        };
        /** @description Defines the permissions policies and sharing policies for the board. */
        BoardPolicyChange: {
            permissionsPolicy?: components["schemas"]["BoardPermissionsPolicy"];
            sharingPolicy?: components["schemas"]["BoardSharingPolicyChange"];
        };
        /** @description Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access. */
        BoardSharingPolicy: {
            /**
             * @description Defines the public-level access to the board.
             * @enum {string}
             */
            access?: "private" | "view" | "edit" | "comment";
            /**
             * @description Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access`.
             * @default no_access
             * @enum {string}
             */
            inviteToAccountAndBoardLinkAccess: "viewer" | "commenter" | "editor" | "coowner" | "owner" | "guest" | "no_access";
            /**
             * @description Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.
             * @default private
             * @enum {string}
             */
            organizationAccess: "private" | "view" | "comment" | "edit";
            /**
             * @description Defines the team-level access to the board.
             * @enum {string}
             */
            teamAccess?: "private" | "view" | "comment" | "edit";
        };
        /** @description Defines the public-level, organization-level, and team-level access for the board. The access level that a user gets depends on the highest level of access that results from considering the public-level, team-level, organization-level, and direct sharing access. */
        BoardSharingPolicyChange: {
            /**
             * @description Defines the public-level access to the board.
             * @default private
             * @enum {string}
             */
            access: "private" | "view" | "edit" | "comment";
            /**
             * @description Defines the user role when inviting a user via the invite to team and board link. For Enterprise users, the `inviteToAccountAndBoardLinkAccess` parameter is always set to `no_access` regardless of the value that you assign for this parameter.
             * @default no_access
             * @enum {string}
             */
            inviteToAccountAndBoardLinkAccess: "viewer" | "commenter" | "editor" | "no_access";
            /**
             * @description Defines the organization-level access to the board. If the board is created for a team that does not belong to an organization, the `organizationAccess` parameter is always set to the default value.
             * @default private
             * @enum {string}
             */
            organizationAccess: "private" | "view" | "comment" | "edit";
            /**
             * @description Defines the team-level access to the board. By default, **edit** for the free plan and **private** for other plans.
             * @enum {string}
             */
            teamAccess?: "private" | "view" | "comment" | "edit";
        };
        BoardWithLinks: {
            /**
             * @description Unique identifier (ID) of the board.
             * @example uXjVOD6LSME=
             */
            id: string;
            /**
             * @description Name of the board.
             * @example Sample board name
             */
            name: string;
            /**
             * @description Description of the board.
             * @example Sample board description
             */
            description: string;
            team?: components["schemas"]["Team"];
            project?: components["schemas"]["BoardProject"];
            picture?: components["schemas"]["Picture"];
            policy?: components["schemas"]["BoardPolicy"];
            /**
             * @description URL to view the board.
             * @example https://miro.com/app/board/uXjVOD6LSME=
             */
            viewLink?: string;
            owner?: components["schemas"]["UserInfoShort"];
            currentUserMembership?: components["schemas"]["BoardMember"];
            /**
             * Format: date-time
             * @description Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserInfoShort"];
            /**
             * Format: date-time
             * @description Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserInfoShort"];
            links?: components["schemas"]["BoardLinks"];
            /**
             * @description Type of the object that is returned. In this case, type returns `board`.
             * @example board
             */
            type: string;
        };
        BoardWithLinksAndLastOpened: {
            /**
             * @description Unique identifier (ID) of the board.
             * @example uXjVOD6LSME=
             */
            id: string;
            /**
             * @description Name of the board.
             * @example Sample board name
             */
            name: string;
            /**
             * @description Description of the board.
             * @example Sample board description
             */
            description: string;
            team?: components["schemas"]["Team"];
            project?: components["schemas"]["BoardProject"];
            picture?: components["schemas"]["Picture"];
            policy?: components["schemas"]["BoardPolicy"];
            /**
             * @description URL to view the board.
             * @example https://miro.com/app/board/uXjVOD6LSME=
             */
            viewLink?: string;
            owner?: components["schemas"]["UserInfoShort"];
            currentUserMembership?: components["schemas"]["BoardMember"];
            /**
             * Format: date-time
             * @description Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserInfoShort"];
            /**
             * Format: date-time
             * @description Date and time when the board was last opened by any user. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            lastOpenedAt?: string;
            lastOpenedBy?: components["schemas"]["GetBoardUserInfoLastOpenedBy"];
            /**
             * Format: date-time
             * @description Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserInfoShort"];
            links?: components["schemas"]["BoardLinks"];
            /**
             * @description Type of the object that is returned. In this case, type returns `board`.
             * @example board
             */
            type: string;
        };
        BoardWithLinksAndWithoutProject: {
            /**
             * @description Unique identifier (ID) of the board.
             * @example uXjVOD6LSME=
             */
            id: string;
            /**
             * @description Name of the board.
             * @example Sample board name
             */
            name: string;
            /**
             * @description Description of the board.
             * @example Sample board description
             */
            description: string;
            team?: components["schemas"]["Team"];
            picture?: components["schemas"]["Picture"];
            policy?: components["schemas"]["BoardPolicy"];
            /**
             * @description URL to view the board.
             * @example https://miro.com/app/board/uXjVOD6LSME=
             */
            viewLink?: string;
            owner?: components["schemas"]["UserInfoShort"];
            currentUserMembership?: components["schemas"]["BoardMember"];
            /**
             * Format: date-time
             * @description Date and time when the board was created. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            createdAt?: string;
            createdBy?: components["schemas"]["UserInfoShort"];
            /**
             * Format: date-time
             * @description Date and time when the board was last modified. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["UserInfoShort"];
            links?: components["schemas"]["BoardLinks"];
            /**
             * @description Type of the object that is returned. In this case, type returns `board`.
             * @example board
             */
            type: string;
        };
        BoardsPagedResponse: {
            /** @description Contains the result data. */
            data?: components["schemas"]["Board"][];
            /**
             * Format: int64
             * @description Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).
             * @example 1
             */
            total?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.
             * @example 1
             */
            size?: number;
            /**
             * Format: int32
             * @description Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.
             * @example 0
             */
            offset?: number;
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.
             *
             * @example 20
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
            type?: string;
        };
        /** @description Contains the connector's caption data, such as content and its position. */
        Caption: {
            /**
             * @description The text you want to display on the connector. Supports inline HTML tags.
             * @example <p>Caption text</p>
             */
            content: string;
            /**
             * @description The relative position of the text on the connector, in percentage, minimum 0%, maximum 100%. With 50% value, the text will be placed in the middle of the connector line. Default: 50%
             * @example 50%
             */
            position?: string;
            /**
             * @description The vertical position of the text on the connector. Default: middle
             * @enum {string}
             */
            textAlignVertical?: "top" | "middle" | "bottom";
        };
        CardCreateRequest: {
            data?: components["schemas"]["CardData"];
            style?: components["schemas"]["CardStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["Parent"];
        };
        CardItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["CardData"];
            style?: components["schemas"]["CardStyle"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example card
             */
            type: string;
        };
        /** @description Contains information about the style of a card item, such as the card theme. */
        UpdateCardStyle: {
            /**
             * @description Hex value of the border color of the card.
             * @example #2d9bf0
             */
            cardTheme?: string;
        };
        CardUpdateRequest: {
            data?: components["schemas"]["CardData"];
            style?: components["schemas"]["UpdateCardStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description If both are provided, startItem.id must be different from endItem.id */
        ConnectorChangesData: {
            startItem?: components["schemas"]["ItemConnectionChangesData"];
            endItem?: components["schemas"]["ItemConnectionChangesData"];
            /**
             * @description The path type of the connector line, defines curvature. Default: curved.
             * @enum {string}
             */
            shape?: "straight" | "elbowed" | "curved";
            /** @description Blocks of text you want to display on the connector. */
            captions?: components["schemas"]["Caption"][];
            style?: components["schemas"]["UpdateConnectorStyle"];
        };
        /** @description startItem.id must be different from endItem.id */
        ConnectorCreationData: {
            startItem: components["schemas"]["ItemConnectionCreationData"];
            endItem: components["schemas"]["ItemConnectionCreationData"];
            /**
             * @description The path type of the connector line, defines curvature. Default: curved.
             * @enum {string}
             */
            shape?: "straight" | "elbowed" | "curved";
            /** @description Blocks of text you want to display on the connector. */
            captions?: components["schemas"]["Caption"][];
            style?: components["schemas"]["ConnectorStyle"];
        };
        /** @description Contains information about the style of a connector, such as the color or caption font size */
        ConnectorStyle: {
            /**
             * @description Hex value representing the color for the captions on the connector. Default: `#1a1a1a`
             * @example #9510ac
             */
            color?: string;
            /**
             * @description The decoration cap of the connector end, like an arrow or circle. Default: stealth.
             * @enum {string}
             */
            endStrokeCap?: "none" | "stealth" | "rounded_stealth" | "diamond" | "filled_diamond" | "oval" | "filled_oval" | "arrow" | "triangle" | "filled_triangle" | "erd_one" | "erd_many" | "erd_only_one" | "erd_zero_or_one" | "erd_one_or_many" | "erd_zero_or_many" | "unknown";
            /**
             * @description Defines the font size, in dp, for the captions on the connector. Default: 14
             * @example 15
             */
            fontSize?: string;
            /**
             * @description The decoration cap of the connector end, like an arrow or circle. Default: none.
             * @enum {string}
             */
            startStrokeCap?: "none" | "stealth" | "rounded_stealth" | "diamond" | "filled_diamond" | "oval" | "filled_oval" | "arrow" | "triangle" | "filled_triangle" | "erd_one" | "erd_many" | "erd_only_one" | "erd_zero_or_one" | "erd_one_or_many" | "erd_zero_or_many" | "unknown";
            /**
             * @description Hex value of the color of the connector line. Default: #000000.
             * @example #2d9bf0
             */
            strokeColor?: string;
            /**
             * @description The stroke pattern of the connector line. Default: normal.
             * @enum {string}
             */
            strokeStyle?: "normal" | "dotted" | "dashed";
            /**
             * @description The thickness of the connector line, in dp. Default: 1.0.
             * @example 2.0
             */
            strokeWidth?: string;
            /**
             * @description The captions orientation relatively to the connector line curvature. Default: aligned.
             * @enum {string}
             */
            textOrientation?: "horizontal" | "aligned";
        };
        /** @description Contains information about the style of a connector, such as the color or caption font size */
        UpdateConnectorStyle: {
            /**
             * @description Hex value representing the color for the captions on the connector.
             * @example #9510ac
             */
            color?: string;
            /**
             * @description The decoration cap of the connector end, like an arrow or circle.
             * @enum {string}
             */
            endStrokeCap?: "none" | "stealth" | "rounded_stealth" | "diamond" | "filled_diamond" | "oval" | "filled_oval" | "arrow" | "triangle" | "filled_triangle" | "erd_one" | "erd_many" | "erd_only_one" | "erd_zero_or_one" | "erd_one_or_many" | "erd_zero_or_many" | "unknown";
            /**
             * @description Defines the font size, in dp, for the captions on the connector.
             * @example 15
             */
            fontSize?: string;
            /**
             * @description The decoration cap of the connector end, like an arrow or circle.
             * @enum {string}
             */
            startStrokeCap?: "none" | "stealth" | "rounded_stealth" | "diamond" | "filled_diamond" | "oval" | "filled_oval" | "arrow" | "triangle" | "filled_triangle" | "erd_one" | "erd_many" | "erd_only_one" | "erd_zero_or_one" | "erd_one_or_many" | "erd_zero_or_many" | "unknown";
            /**
             * @description Hex value of the color of the connector line.
             * @example #2d9bf0
             */
            strokeColor?: string;
            /**
             * @description The stroke pattern of the connector line.
             * @enum {string}
             */
            strokeStyle?: "normal" | "dotted" | "dashed";
            /**
             * @description The thickness of the connector line, in dp.
             * @example 2.0
             */
            strokeWidth?: string;
            /**
             * @description The captions orientation relatively to the connector line curvature.
             * @enum {string}
             */
            textOrientation?: "horizontal" | "aligned";
        };
        /** @description Contains the result data. */
        ConnectorWithLinks: {
            /** @description Blocks of text you want to display on the connector. */
            captions?: components["schemas"]["Caption"][];
            /**
             * Format: date-time
             * @description Date and time when the connector was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            endItem?: components["schemas"]["ItemConnectionWithLinks"];
            /**
             * @description Unique identifier (ID) of a connector.
             * @example 3458764517517818867
             */
            id: string;
            /** @description Indicates whether the connector is supported at the moment. If this parameter returns `false`, we do not support the connector at the moment. We do not allow updates for unsupported connectors and we might not return all data about the connector, such as intermediate points and connection points to the canvas. */
            isSupported?: boolean;
            links?: components["schemas"]["SelfLink"];
            /**
             * Format: date-time
             * @description Date and time when the connector was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            /**
             * @description The path type of the connector line, defines curvature. Default: curved.
             * @default curved
             * @enum {string}
             */
            shape: "straight" | "elbowed" | "curved";
            startItem?: components["schemas"]["ItemConnectionWithLinks"];
            style?: components["schemas"]["ConnectorStyle"];
            /** @description Type of board object that is returned. */
            type?: string;
        };
        ConnectorsCursorPaged: {
            /**
             * @description A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.
             * @example MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4=
             */
            cursor?: string;
            /** @description Contains the result data. */
            data?: components["schemas"]["ConnectorWithLinks"][];
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response.
             * @example 20
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
            /**
             * Format: int32
             * @description Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             * @example 1
             */
            size?: number;
            /** Format: int64 */
            total?: number;
        };
        DocumentCreateRequest: {
            data: components["schemas"]["DocumentUrlData"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["FixedRatioGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        DocumentUpdateRequest: {
            data?: components["schemas"]["DocumentUrlDataChanges"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["FixedRatioGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains information about the document URL. */
        DocumentUrlDataChanges: {
            /** @description A short text header to identify the document. */
            title?: string;
            /**
             * @description URL where the document is hosted.
             * @example https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
             */
            url?: string;
        };
        EmbedCreateRequest: {
            data: components["schemas"]["EmbedUrlData"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["FixedRatioNoRotationGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        EmbedItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["EmbedData"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example embed
             */
            type: string;
        };
        EmbedUpdateRequest: {
            data?: components["schemas"]["EmbedUrlDataChanges"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["FixedRatioNoRotationGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains information about the embed URL. */
        EmbedUrlDataChanges: {
            /**
             * @description Defines how the content in the embed item is displayed on the board.
             *     `inline`: The embedded content is displayed directly on the board.
             *     `modal`: The embedded content is displayed inside a modal overlay on the board.
             * @enum {string}
             */
            mode?: "inline" | "modal";
            /** @description URL of the image to be used as the preview image for the embedded item. */
            previewUrl?: string;
            /**
             * @description A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.
             * @example https://www.youtube.com/watch?v=HlVSNEiFCBk
             */
            url?: string;
        };
        /** @description Contains geometrical information about the item. You can set either the width or height. You cannot set both the width and height at the same time. */
        FixedRatioNoRotationGeometry: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             */
            height?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             */
            width?: number;
        };
        GenericItemUpdate: {
            parent?: components["schemas"]["Parent"];
            position?: components["schemas"]["PositionChange"];
        };
        ImageCreateRequest: {
            data: components["schemas"]["ImageUrlData"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["FixedRatioGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        ImageUpdateRequest: {
            data?: components["schemas"]["ImageUrlDataChanges"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["FixedRatioGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains information about the invites that failed. */
        InvitationError: {
            /**
             * @description Email ID for which the invitation failed.
             * @example john.smith.demo@miro.com
             */
            email?: string;
            /**
             * @description Reason why the invitation failed.
             * @example INVITATION_FAILED
             */
            reason?: string;
        };
        InvitationResult: {
            /** @description Contains information about the invites that failed. */
            failed?: components["schemas"]["InvitationError"][];
            /**
             * @description Contains information about the invites that were successfully sent.
             * @example 3074457350804038700
             */
            successful?: number[];
        };
        /** @description The ending point of the connector. If startItem is also provided, endItem.id must be different from startItem.id */
        ItemConnectionChangesData: {
            /**
             * @description Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.
             * @example 3458764517517818867
             */
            id?: string;
            position?: components["schemas"]["RelativeOffset"];
            /**
             * @description The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.
             * @enum {string}
             */
            snapTo?: "auto" | "top" | "right" | "bottom" | "left";
        };
        /** @description The end point of the connector. endItem.id must be different from startItem.id */
        ItemConnectionCreationData: {
            /**
             * @description Unique identifier (ID) of the item to which you want to attach the connector. Note that Frames are not supported at the moment.
             * @example 3458764517517818867
             */
            id?: string;
            position?: components["schemas"]["RelativeOffset"];
            /**
             * @description The side of the item connector should be attached to, the connection point will be placed in the middle of that side. Option `auto` allows to pick a connection point automatically. Only either `position` or `snapTo` parameter is allowed to be set, if neither provided `snapTo: auto` will be used by default.
             * @enum {string}
             */
            snapTo?: "auto" | "top" | "right" | "bottom" | "left";
        };
        /** @description The starting point of the connector. */
        ItemConnectionWithLinks: {
            /**
             * @description Unique identifier (ID) of the item the connector is attached to.
             * @example 3458764517517818867
             */
            id?: string;
            links?: components["schemas"]["SelfLink"];
            position?: components["schemas"]["RelativeOffset"];
        };
        /** @description Contains information about the project with which the board is associated. */
        BoardProject: {
            /**
             * Format: int64
             * @description Unique identifier (ID) of the project.
             * @example 3088887345710756000
             */
            id?: string;
        };
        /** @description The relative position of the point on an item where the connector is attached. Position with x=0% and y=0% correspond to the top-left corner of the item, x=100% and y=100% correspond to the right-bottom corner. */
        RelativeOffset: {
            /**
             * @description X-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.
             * @example 50%
             */
            x?: string;
            /**
             * @description Y-axis relative coordinate of the location where the connector connects with an item, in percentage, minimum 0%, maximum 100%.
             * @example 0%
             */
            y?: string;
        };
        /** @description Contains information about the shape style, such as the border color or opacity. */
        UpdateShapeStyle: {
            /** @description Defines the color of the border of the shape. */
            borderColor?: string;
            /** @description Defines the opacity level of the shape border.
             *     Possible values: any number between `0.0` and `1.0`, where:
             *     `0.0`: the background color is completely transparent or invisible
             *     `1.0`: the background color is completely opaque or solid */
            borderOpacity?: string;
            /**
             * @description Defines the style used to represent the border of the shape.
             * @enum {string}
             */
            borderStyle?: "normal" | "dotted" | "dashed";
            /** @description Defines the thickness of the shape border, in dp. */
            borderWidth?: string;
            /**
             * @description Hex value representing the color for the text within the shape item.
             * @example #1a1a1a
             */
            color?: string;
            /**
             * @description Fill color for the shape.
             *     Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`
             * @example #8fd14f
             */
            fillColor?: string;
            /** @description Opacity level of the fill color.
             *     Possible values: any number between `0` and `1`, where:
             *     `0.0`: the background color is completely transparent or invisible
             *     `1.0`: the background color is completely opaque or solid
             *      */
            fillOpacity?: string;
            /**
             * @description Defines the font type for the text in the shape item.
             * @enum {string}
             */
            fontFamily?: "arial" | "abril_fatface" | "bangers" | "eb_garamond" | "georgia" | "graduate" | "gravitas_one" | "fredoka_one" | "nixie_one" | "open_sans" | "permanent_marker" | "pt_sans" | "pt_sans_narrow" | "pt_serif" | "rammetto_one" | "roboto" | "roboto_condensed" | "roboto_slab" | "caveat" | "times_new_roman" | "titan_one" | "lemon_tuesday" | "roboto_mono" | "noto_sans" | "plex_sans" | "plex_serif" | "plex_mono" | "spoof" | "tiempos_text" | "formular";
            /** @description Defines the font size, in dp, for the text on the shape. */
            fontSize?: string;
            /**
             * @description Defines how the sticky note text is horizontally aligned.
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center";
            /**
             * @description Defines how the sticky note text is vertically aligned.
             * @enum {string}
             */
            textAlignVertical?: "top" | "middle" | "bottom";
        };
        StickyNoteCreateRequest: {
            data?: components["schemas"]["StickyNoteData"];
            style?: components["schemas"]["StickyNoteStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["FixedRatioNoRotationGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        StickyNoteItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["StickyNoteData"];
            style?: components["schemas"]["StickyNoteStyle"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example sticky_note
             */
            type: string;
        };
        /** @description Contains information about the style of a sticky note item, such as the fill color or text alignment. */
        UpdateStickyNoteStyle: {
            /**
             * @description Fill color for the sticky note.
             * @enum {string}
             */
            fillColor?: "gray" | "light_yellow" | "yellow" | "orange" | "light_green" | "green" | "dark_green" | "cyan" | "light_pink" | "pink" | "violet" | "red" | "light_blue" | "blue" | "dark_blue" | "black";
            /**
             * @description Defines how the sticky note text is horizontally aligned.
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center";
            /**
             * @description Defines how the sticky note text is vertically aligned.
             * @enum {string}
             */
            textAlignVertical?: "top" | "middle" | "bottom";
        };
        StickyNoteUpdateRequest: {
            data?: components["schemas"]["StickyNoteData"];
            style?: components["schemas"]["UpdateStickyNoteStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["FixedRatioNoRotationGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        TextCreateRequest: {
            data: components["schemas"]["TextData"];
            style?: components["schemas"]["TextStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["WidthOnlyAdjustableGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        TextItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["TextData"];
            style?: components["schemas"]["TextStyle"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example text
             */
            type: string;
        };
        /** @description Contains information about the style of a text item, such as the fill color or font family. */
        UpdateTextStyle: {
            /**
             * @description Hex value representing the color for the text within the text item.
             * @example #1a1a1a
             */
            color?: string;
            /**
             * @description Background color of the text item.
             * @example #e6e6e6
             */
            fillColor?: string;
            /** @description Opacity level of the background color.
             *     Possible values: any number between `0.0` and `1.0`, where:
             *     `0.0`: the background color is completely transparent or invisible
             *     `1.0`: the background color is completely opaque or solid */
            fillOpacity?: string;
            /**
             * @description Font type for the text in the text item.
             * @enum {string}
             */
            fontFamily?: "arial" | "abril_fatface" | "bangers" | "eb_garamond" | "georgia" | "graduate" | "gravitas_one" | "fredoka_one" | "nixie_one" | "open_sans" | "permanent_marker" | "pt_sans" | "pt_sans_narrow" | "pt_serif" | "rammetto_one" | "roboto" | "roboto_condensed" | "roboto_slab" | "caveat" | "times_new_roman" | "titan_one" | "lemon_tuesday" | "roboto_mono" | "noto_sans" | "plex_sans" | "plex_serif" | "plex_mono" | "spoof" | "tiempos_text" | "formular";
            /** @description Font size, in dp. */
            fontSize?: string;
            /**
             * @description Horizontal alignment for the item's content.
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center";
        };
        TextUpdateRequest: {
            data?: components["schemas"]["TextData"];
            style?: components["schemas"]["UpdateTextStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["WidthOnlyAdjustableGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains information about the user who created the board. */
        UserInfoShort: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3074457353169356300
             */
            id: string;
            /**
             * @description Name of the user.
             * @example John Smith
             */
            name: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type: string;
        };
        /** @description Contains information about the user who opened the board last. */
        UserInfoLastOpenedBy: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3074457353169356300
             */
            id?: string;
            /**
             * @description Name of the user.
             * @example John Smith
             */
            name?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last opened the board. */
        GetBoardUserInfoLastOpenedBy: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3074457353169356300
             */
            id: string;
            /**
             * @description Name of the user.
             * @example John Smith
             */
            name: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type: string;
        };
        /** @description Contains geometrical information about the item, such as its width or rotation. You can only specify the width of the text item as the height is dynamically updated based on the content. */
        WidthOnlyAdjustableGeometry: {
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             *     The minimum `width` of a `text` widget is relative to the font size of the `text` widget. The width must be at least 1.7 times wider than the font size.
             *     For example, if the font size of the `text` item is `14`, the minimum `width` is `24`.
             */
            width?: number;
        };
        /** @description Contains app card item data, such as the title, description, or fields. */
        AppCardDataResponse: {
            /**
             * @description A short text description to add context about the app card.
             * @example Sample app card description
             */
            description?: string;
            /** @description Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view. */
            fields?: components["schemas"]["CustomField"][];
            /** @description Defines whether the card is owned by the application making the call. */
            owned?: boolean;
            /**
             * @description Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.
             * @enum {string}
             */
            status?: "disconnected" | "connected" | "disabled";
            /**
             * @description A short text header to identify the app card.
             * @example sample app card item
             */
            title?: string;
        };
        /** @description Contains information about the style of an app card item, such as the fill color. */
        AppCardStylePlatformbulkcreateoperation: {
            /**
             * @description Hex value of the border color of the app card.
             *     Default: `#2d9bf0`.
             * @example #2d9bf0
             */
            fillColor?: string;
        };
        /** @description Contains card item data, such as the title, description, due date, or assignee ID. */
        CardDataPlatformbulkcreateoperation: {
            /**
             * Format: int64
             * @description Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is a string containing numbers, and it is automatically assigned to a user when they first sign up.
             * @example 3074457362577955300
             */
            assigneeId?: string;
            /**
             * @description A short text description to add context about the card.
             * @example sample card description
             */
            description?: string;
            /**
             * Format: date-time
             * @description The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2023-10-12T22:00:55.000Z
             */
            dueDate?: string;
            /**
             * @description A short text header for the card.
             * @default sample card item
             * @example sample card item
             */
            title: string;
        };
        /** @description Contains information about the style of a card item, such as the card theme. */
        CardStylePlatformbulkcreateoperation: {
            /**
             * @description Hex value of the border color of the card.
             *     Default: `#2d9bf0`.
             * @example #2d9bf0
             */
            cardTheme?: string;
        };
        /** @description Contains information about the document URL. */
        DocumentUrlDataPlatformbulkcreateoperation: {
            /**
             * @description A short text header to identify the document.
             * @example Sample document title
             */
            title?: string;
            /**
             * @description URL where the document is hosted.
             * @default https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
             * @example https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
             */
            url: string;
        };
        /** @description Contains information about the embed URL. */
        EmbedUrlDataPlatformbulkcreateoperation: {
            /**
             * @description Defines how the content in the embed item is displayed on the board.
             *     `inline`: The embedded content is displayed directly on the board.
             *     `modal`: The embedded content is displayed inside a modal overlay on the board.
             * @enum {string}
             */
            mode?: "inline" | "modal";
            /** @description URL of the image to be used as the preview image for the embedded item. */
            previewUrl?: string;
            /**
             * @description A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.
             * @default https://www.youtube.com/watch?v=HlVSNEiFCBk
             */
            url: string;
        };
        EmbedDataResponse: {
            /**
             * @description Type of the embedded item's content.
             * @example video
             */
            contentType?: string;
            /**
             * @description Short description of the embedded item.
             * @example So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en...
             */
            description?: string;
            /**
             * @description HTML code of the embedded item.
             * @example <iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>
             */
            html?: string;
            /**
             * @description Defines how the content in the embed item is displayed on the board.
             *     `inline`: The embedded content is displayed directly on the board.
             *     `modal`: The embedded content is displayed inside a modal overlay on the board.
             * @enum {string}
             */
            mode?: "inline" | "modal";
            /**
             * @description The URL to download the resource. You must use your access token to access the URL.
             *     The URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:
             *     `format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.
             *     `redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.
             *     If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.
             * @example https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false
             */
            previewUrl?: string;
            /**
             * @description Name of the content's provider.
             * @example YouTube
             */
            providerName?: string;
            /**
             * @description Url of the content's provider.
             * @example https://www.youtube.com/
             */
            providerUrl?: string;
            /**
             * @description Title of the embedded item.
             * @example HOW TO ORGANIZE YOUR LIFE WITH MIRO! ?? Virtual Whiteboard Tour
             */
            title?: string;
            /**
             * @description A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.
             * @example https://www.youtube.com/watch?v=HlVSNEiFCBk
             */
            url?: string;
        };
        /** @description Contains information about the shape style, such as the border color or opacity. */
        ShapeStyle: {
            /** @description Defines the color of the border of the shape.
             *     Default: `#1a1a1a` (dark gray). */
            borderColor?: string;
            /** @description Defines the opacity level of the shape border.
             *     Possible values: any number between `0.0` and `1.0`, where:
             *     `0.0`: the background color is completely transparent or invisible
             *     `1.0`: the background color is completely opaque or solid
             *     Default: `1.0` (solid color). */
            borderOpacity?: string;
            /**
             * @description Defines the style used to represent the border of the shape.
             *     Default: `normal`.
             * @enum {string}
             */
            borderStyle?: "normal" | "dotted" | "dashed";
            /** @description Defines the thickness of the shape border, in dp.
             *     Default: `2.0`. */
            borderWidth?: string;
            /**
             * @description Hex value representing the color for the text within the shape item.
             *     Default: `#1a1a1a`.
             * @example #1a1a1a
             */
            color?: string;
            /**
             * @description Fill color for the shape.
             *     Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`
             *     Default: #ffffff.
             * @example #8fd14f
             */
            fillColor?: string;
            /** @description Opacity level of the fill color.
             *     Possible values: any number between `0` and `1`, where:
             *     `0.0`: the background color is completely transparent or invisible.
             *     `1.0`: the background color is completely opaque or solid.
             *
             *      Default: `1.0` if `fillColor` is provided, `0.0` if `fillColor` is not provided.
             *      */
            fillOpacity?: string;
            /**
             * @description Defines the font type for the text in the shape item.
             *     Default: `arial`.
             * @enum {string}
             */
            fontFamily?: "arial" | "abril_fatface" | "bangers" | "eb_garamond" | "georgia" | "graduate" | "gravitas_one" | "fredoka_one" | "nixie_one" | "open_sans" | "permanent_marker" | "pt_sans" | "pt_sans_narrow" | "pt_serif" | "rammetto_one" | "roboto" | "roboto_condensed" | "roboto_slab" | "caveat" | "times_new_roman" | "titan_one" | "lemon_tuesday" | "roboto_mono" | "noto_sans" | "plex_sans" | "plex_serif" | "plex_mono" | "spoof" | "tiempos_text" | "formular";
            /** @description Defines the font size, in dp, for the text on the shape.
             *     Default: `14`. */
            fontSize?: string;
            /**
             * @description Defines how the sticky note text is horizontally aligned.
             *     Default: `center`.
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center";
            /**
             * @description Defines how the sticky note text is vertically aligned.
             *     Default: `top`.
             * @enum {string}
             */
            textAlignVertical?: "top" | "middle" | "bottom";
        };
        /** @description Contains sticky note item data, such as the content or shape of the sticky note. */
        StickyNoteDataPlatformbulkcreateoperation: {
            /**
             * @description The actual text (content) that appears in the sticky note item.
             * @example Hello
             */
            content?: string;
            /**
             * @description Defines the geometric shape of the sticky note and aspect ratio for its dimensions.
             * @default square
             * @enum {string}
             */
            shape: "square" | "rectangle";
        };
        /** @description Contains information about the style of a sticky note item, such as the fill color or text alignment. */
        StickyNoteStylePlatformbulkcreateoperation: {
            /**
             * @description Fill color for the sticky note.
             *     Default: `light_yellow`.
             * @enum {string}
             */
            fillColor?: "gray" | "light_yellow" | "yellow" | "orange" | "light_green" | "green" | "dark_green" | "cyan" | "light_pink" | "pink" | "violet" | "red" | "light_blue" | "blue" | "dark_blue" | "black";
            /**
             * @description Defines how the sticky note text is horizontally aligned.
             *     Default: `center`.
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center";
            /**
             * @description Defines how the sticky note text is vertically aligned.
             *     Default: `top`.
             * @enum {string}
             */
            textAlignVertical?: "top" | "middle" | "bottom";
        };
        /** @description Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data). */
        TextDataPlatformbulkcreateoperation: {
            /**
             * @description The actual text (content) that appears in the text item.
             * @example Hello
             */
            content: string;
        };
        /** @description Contains information about the style of a text item, such as the fill color or font family. */
        TextStyle: {
            /**
             * @description Hex value representing the color for the text within the text item.
             *     Default: `#1a1a1a`.
             * @example #1a1a1a
             */
            color?: string;
            /**
             * @description Background color of the text item.
             *     Default: `#ffffff`.
             * @example #e6e6e6
             */
            fillColor?: string;
            /** @description Opacity level of the background color.
             *     Possible values: any number between `0.0` and `1.0`, where:
             *     `0.0`: the background color is completely transparent or invisible.
             *     `1.0`: the background color is completely opaque or solid.
             *     Default: `1.0` if `fillColor` is provided, `0.0` if `fillColor` is not provided. */
            fillOpacity?: string;
            /**
             * @description Font type for the text in the text item.
             *     Default: `arial`.
             * @enum {string}
             */
            fontFamily?: "arial" | "abril_fatface" | "bangers" | "eb_garamond" | "georgia" | "graduate" | "gravitas_one" | "fredoka_one" | "nixie_one" | "open_sans" | "permanent_marker" | "pt_sans" | "pt_sans_narrow" | "pt_serif" | "rammetto_one" | "roboto" | "roboto_condensed" | "roboto_slab" | "caveat" | "times_new_roman" | "titan_one" | "lemon_tuesday" | "roboto_mono" | "noto_sans" | "plex_sans" | "plex_serif" | "plex_mono" | "spoof" | "tiempos_text" | "formular";
            /** @description Font size, in dp.
             *     Default: `14`. */
            fontSize?: string;
            /**
             * @description Horizontal alignment for the item's content.
             *     Default: `center.`
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center";
        };
        /** @description Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view. */
        CustomFieldPlatformbulkcreateoperation: {
            /**
             * @description Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.
             * @example #2fa9e3
             */
            fillColor?: string;
            /**
             * @description The shape of the icon on the preview field.
             * @default round
             * @enum {string}
             */
            iconShape: "round" | "square";
            /**
             * @description A valid URL pointing to an image available online.
             *     The transport protocol must be HTTPS.
             *     Possible image file formats: JPG/JPEG, PNG, SVG.
             * @example https://cdn-icons-png.flaticon.com/512/5695/5695864.png
             */
            iconUrl?: string;
            /**
             * @description Hex value representing the color of the text string assigned to `value`.
             * @example #1a1a1a
             */
            textColor?: string;
            /**
             * @description A short text displayed in a tooltip when clicking or hovering over the preview field.
             * @example Completion status indicator
             */
            tooltip?: string;
            /**
             * @description The actual data value of the custom field.
             *     It can be any type of information that you want to convey.
             * @example Status: in progress
             */
            value?: string;
        };
        /** @description Contains geometrical information about the item, such as its width or height. */
        GeometryPlatformbulkcreateoperation: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             * @example 60
             */
            height?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        /** @description Updates one or more items in one request. You can update up to 20 items per request. */
        ItemChanges: {
            id?: components["schemas"]["ItemId"];
            type?: components["schemas"]["ItemTypeChange"];
            data?: components["schemas"]["ItemDataChanges"];
            style?: components["schemas"]["ItemStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Creates one or more items in one request. You can create up to 20 items per request. */
        ItemCreate: {
            type: components["schemas"]["ItemTypeChange"];
            data?: components["schemas"]["ItemDataCreate"];
            style?: components["schemas"]["ItemStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Provides information about item-specific fields for update request. */
        ItemDataChanges: components["schemas"]["AppCardData"] | components["schemas"]["ImageUrlDataChanges"];
        /** @description Contains data information applicable for each item type. */
        ItemDataCreate: components["schemas"]["AppCardData"] | components["schemas"]["CardData"] | components["schemas"]["DocumentUrlData"] | components["schemas"]["EmbedUrlData"] | components["schemas"]["ImageUrlData"] | components["schemas"]["ShapeData"] | components["schemas"]["StickyNoteData"] | components["schemas"]["TextData"];
        /** @description Contains cursor-based items page information. */
        ItemsPage: {
            /**
             * Format: int32
             * @description Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             * @example 1
             */
            size: number;
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response.
             * @example 10
             */
            limit: number;
            /**
             * Format: int64
             * @description Total number of results available for the given request.
             * @example 11
             */
            total: number;
            /** @description Contains the result data. */
            data: components["schemas"]["Item"][];
            links: components["schemas"]["PageLinks"];
            /**
             * @description Type of the object.
             * @example cursor-list
             */
            type: string;
        };
        /** @description Contains information about item-specific styles. */
        ItemStyle: components["schemas"]["AppCardStyle"] | components["schemas"]["CardStyle"] | components["schemas"]["ShapeStyle"] | components["schemas"]["StickyNoteStyle"] | components["schemas"]["TextStyle"];
        /**
         * @description Type of item that you want to create.
         * @example text
         * @enum {string}
         */
        ItemTypeChange: "app_card" | "text" | "shape" | "sticky_note" | "image" | "document" | "card" | "frame" | "embed";
        /** @description Contains information about the image URL. */
        ImageUrlData: {
            /**
             * @description A short text header to identify the image.
             * @example Sample image title
             */
            title?: string;
            /**
             * @description URL of the image.
             * @default https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png
             * @example https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png
             */
            url: string;
        };
        /** @description Contains information about the image URL. */
        ImageUrlDataChanges: {
            /**
             * @description A short text header to identify the image.
             * @example Test image title
             */
            title?: string;
            /**
             * @description URL of the image.
             * @example https://miro.com/static/images/page/mr-index/localization/en/slider/ideation_brainstorming.png
             */
            url?: string;
        };
        /** @description Error information */
        Error: {
            /**
             * @description Code of the error
             * @example 2.074
             */
            code?: string;
            /**
             * @description Description of the error
             * @example Error message
             */
            message: string;
            context?: Record<string, never>;
            /**
             * Format: int32
             * @description Status code of the error
             * @example 400
             */
            status?: number;
            /**
             * @description Type of entity that is returned.
             * @example error
             */
            type: string;
        };
        /** @description Error information with details about operation failure */
        BulkOperationError: {
            /**
             * @description Type of the error
             * @example error
             */
            type?: string;
            /**
             * @description Code of the error
             * @example 2.074
             */
            code?: string;
            /**
             * @description Description of the error
             * @example Error message
             */
            message: string;
            context?: {
                fields?: components["schemas"]["BulkSubOperationError"][];
            };
            /**
             * Format: int32
             * @description Status code of the error
             * @example 400
             */
            status?: number;
        };
        BulkSubOperationError: {
            /** @description 0-based index indicating a sub-operations from the input that caused a failure followed by parameter name */
            field: string;
            /**
             * @description Description of the sub-operation related error
             * @example Invalid parameters
             */
            message: string;
            context?: Record<string, never>;
        };
        /** @description Contains information about the style of an app card item, such as the fill color. */
        AppCardStyle: {
            /**
             * @description Hex value of the border color of the app card.
             *     Default: `#2d9bf0`.
             * @example #2d9bf0
             */
            fillColor?: string;
        };
        /** @description Contains information about the style of a card item, such as the card theme. */
        CardStyle: {
            /**
             * @description Hex value of the border color of the card.
             *     Default: `#2d9bf0`.
             * @example #2d9bf0
             */
            cardTheme?: string;
        };
        /** @description Contains information about the document URL. */
        DocumentUrlData: {
            /**
             * @description A short text header to identify the document.
             * @example Sample document title
             */
            title?: string;
            /**
             * @description URL where the document is hosted.
             * @default https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
             * @example https://www.w3.org/WAI/ER/tests/xhtml/testfiles/resources/pdf/dummy.pdf
             */
            url: string;
        };
        /** @description Contains information about the embed URL. */
        EmbedUrlData: {
            /**
             * @description Defines how the content in the embed item is displayed on the board.
             *     `inline`: The embedded content is displayed directly on the board.
             *     `modal`: The embedded content is displayed inside a modal overlay on the board.
             * @enum {string}
             */
            mode?: "inline" | "modal";
            /** @description URL of the image to be used as the preview image for the embedded item. */
            previewUrl?: string;
            /**
             * @description A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.
             * @default https://www.youtube.com/watch?v=HlVSNEiFCBk
             */
            url: string;
        };
        /** @description Contains information about the style of a sticky note item, such as the fill color or text alignment. */
        StickyNoteStyle: {
            /**
             * @description Fill color for the sticky note.
             *     Default: `light_yellow`.
             * @enum {string}
             */
            fillColor?: "gray" | "light_yellow" | "yellow" | "orange" | "light_green" | "green" | "dark_green" | "cyan" | "light_pink" | "pink" | "violet" | "red" | "light_blue" | "blue" | "dark_blue" | "black";
            /**
             * @description Defines how the sticky note text is horizontally aligned.
             *     Default: `center`.
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center";
            /**
             * @description Defines how the sticky note text is vertically aligned.
             *     Default: `top`.
             * @enum {string}
             */
            textAlignVertical?: "top" | "middle" | "bottom";
        };
        /** @description Contains frame item data, such as the title, frame type, or frame format. */
        FrameChanges: {
            /**
             * @description Only custom frames are supported at the moment.
             * @default custom
             * @enum {string}
             */
            format: "custom";
            /**
             * @description Title of the frame. This title appears at the top of the frame.
             * @default Sample frame title
             */
            title: string;
            /**
             * @description Only free form frames are supported at the moment.
             * @default freeform
             * @enum {string}
             */
            type: "freeform";
            /**
             * @description Hide or reveal the content inside a frame (Enterprise plan only).
             * @default true
             */
            showContent: boolean;
        };
        FrameCreateRequest: {
            data: components["schemas"]["FrameChanges"];
            style?: components["schemas"]["FrameStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["GeometryNoRotation"];
        };
        /** @description Contains frame item data, such as the title, frame type, or frame format. */
        FrameDataPlatformContainers: {
            /**
             * @description Only custom frames are supported at the moment.
             * @default custom
             * @enum {string}
             */
            format: "custom" | "desktop" | "phone" | "tablet" | "a4" | "letter" | "ratio_1x1" | "ratio_4x3" | "ratio_16x9";
            /**
             * @description Title of the frame. This title appears at the top of the frame.
             * @example Sample frame title
             */
            title?: string;
            /**
             * @description Only free form frames are supported at the moment.
             * @default freeform
             * @enum {string}
             */
            type: "freeform" | "heap" | "grid" | "rows" | "columns" | "unknown";
            /**
             * @description Hide or reveal the content inside a frame (Enterprise plan only).
             * @default true
             */
            showContent: boolean;
        };
        FrameItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["FrameData"];
            style?: components["schemas"]["FrameStyle"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example frame
             */
            type: string;
        };
        /** @description Contains information about the style of a frame item, such as the fill color. */
        FrameStyle: {
            /**
             * @description Fill color for the frame.
             *     Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`
             *     Default: #ffffffff (transparent).
             * @example #ffffffff
             */
            fillColor?: string;
        };
        /** @description Contains information about the style of a frame item, such as the fill color. */
        UpdateFrameStyle: {
            /**
             * @description Fill color for the frame.
             *     Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`
             * @example #ffffffff
             */
            fillColor?: string;
        };
        FrameUpdateRequest: {
            data?: components["schemas"]["FrameChanges"];
            style?: components["schemas"]["UpdateFrameStyle"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["GeometryNoRotation"];
        };
        GenericItemCursorPagedPlatformContainers: {
            /** @description Contains the result data. */
            data?: components["schemas"]["GenericItem"][];
            /** Format: int64 */
            total?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             * @example 1
             */
            size?: number;
            /**
             * @description A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.
             * @example MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4=
             */
            cursor?: string;
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response.
             * @example 20
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
        };
        /** @description Contains geometrical information about the item, such as its width or height. */
        GeometryPlatformContainers: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             * @example 60
             */
            height?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        /** @description Contains geometrical information about the item, such as its width or height. */
        GeometryNoRotation: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             */
            height?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             */
            width?: number;
        };
        OpaqueData: Record<string, never>;
        /** @description Contains information about the parent frame for the item. */
        ParentLinksEnvelopePlatformContainers: {
            /**
             * Format: int64
             * @description Unique identifier (ID) of the parent frame for the item.
             * @example 3074457362577955300
             */
            id?: string;
            links?: components["schemas"]["SelfLink"];
        };
        /** @description Contains applicable links for the item. */
        WidgetLinksPlatformContainers: {
            /**
             * @description Link to obtain information about the child items related to the frame.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor=
             */
            related?: string;
            /**
             * @description Link to obtain information about the current item.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487
             */
            self?: string;
        };
        /** @description Contains information about the user who created the item. */
        createdByPlatformContainers: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last modified the item. */
        modifiedByPlatformContainers: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        DocumentDataResponsePlatformcreateitemsinbulkusingfilefromdevice: {
            /**
             * @description The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.
             *     `redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.
             *     If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.
             * @example https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false
             */
            documentUrl?: string;
            /**
             * @description A short text header to identify the document.
             * @example Sample document title
             */
            title?: string;
        };
        /** @description Contains geometrical information about the item, such as its width or height. */
        GeometryPlatformcreateitemsinbulkusingfilefromdevice: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             * @example 60
             */
            height?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        /** @description Contains information about an item. */
        Item: {
            id: components["schemas"]["ItemId"];
            /**
             * @description Type of item.
             * @example document
             */
            type: string;
            data?: components["schemas"]["ItemData"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["ParentWithLinks"];
            createdBy?: components["schemas"]["CreatedBy"];
            createdAt?: components["schemas"]["CreationTime"];
            modifiedBy?: components["schemas"]["ModifiedBy"];
            modifiedAt?: components["schemas"]["ModificationTime"];
            links: components["schemas"]["SelfLink"];
        };
        /** @description Contains information about item-specific data. */
        ItemData: components["schemas"]["DocumentDataResponse"] | components["schemas"]["ImageDataResponse"];
        /**
         * Format: int64
         * @description Unique identifier (ID) of an item.
         * @example 3458764517517819000
         */
        ItemIdPlatformcreateitemsinbulkusingfilefromdevice: string;
        /** @description Contains items resulting from a bulk create or update operation. */
        Items: {
            /** @description Contains the result data. */
            data: components["schemas"]["Item"][];
            /**
             * @description Type of the object.
             * @example bulk-list
             */
            type: string;
        };
        ImageDataResponsePlatformcreateitemsinbulkusingfilefromdevice: {
            /**
             * @description The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters: `format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`. `redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file. If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.
             * @example https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false
             */
            imageUrl?: string;
            /**
             * @description A short text header to identify the image.
             * @example Sample image title
             */
            title?: string;
        };
        /**
         * Format: date-time
         * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
         * @example 2022-03-30T17:26:50.000Z
         */
        CreationTimePlatformcreateitemsinbulkusingfilefromdevice: string;
        /**
         * Format: date-time
         * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
         * @example 2022-03-30T17:26:50.000Z
         */
        ModificationTimePlatformcreateitemsinbulkusingfilefromdevice: string;
        /** @description Contains information about the user who created the item. */
        CreatedByPlatformcreateitemsinbulkusingfilefromdevice: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last modified the item. */
        ModifiedByPlatformcreateitemsinbulkusingfilefromdevice: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the parent this item attached to. */
        ParentWithLinksPlatformcreateitemsinbulkusingfilefromdevice: {
            /**
             * Format: int64
             * @description Unique identifier (ID) of a container item.
             * @example 3458764517517819001
             */
            id?: string;
            links?: components["schemas"]["SelfLink"];
        };
        /**
         * Format: double
         * @description X-axis coordinate of the location of the item on the board. By default, all items have absolute positioning to the board, not the current viewport. Default: 0. The center point of the board has `x: 0` and `y: 0` coordinates.
         * @example 100
         */
        XCoordinatePlatformcreateitemsinbulkusingfilefromdevice: number;
        /**
         * Format: double
         * @description Y-axis coordinate of the location of the item on the board. By default, all items have absolute positioning to the board, not the current viewport. Default: 0. The center point of the board has `x: 0` and `y: 0` coordinates.
         * @example 100
         */
        YCoordinatePlatformcreateitemsinbulkusingfilefromdevice: number;
        DocumentDataResponse: {
            /**
             * @description The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.
             *     `redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.
             *     If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.
             * @example https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false
             */
            documentUrl?: string;
            /**
             * @description A short text header to identify the document.
             * @example Sample document title
             */
            title?: string;
        };
        /**
         * Format: int64
         * @description Unique identifier (ID) of an item.
         * @example 3458764517517819000
         */
        ItemId: string;
        ImageDataResponse: {
            /**
             * @description The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters: `format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`. `redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file. If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.
             * @example https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false
             */
            imageUrl?: string;
            /**
             * @description A short text header to identify the image.
             * @example Sample image title
             */
            title?: string;
        };
        /**
         * Format: date-time
         * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
         * @example 2022-03-30T17:26:50.000Z
         */
        CreationTime: string;
        /**
         * Format: date-time
         * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
         * @example 2022-03-30T17:26:50.000Z
         */
        ModificationTime: string;
        /** @description Contains information about the parent this item attached to. */
        ParentWithLinks: {
            /**
             * Format: int64
             * @description Unique identifier (ID) of a container item.
             * @example 3458764517517819001
             */
            id?: string;
            links?: components["schemas"]["SelfLink"];
        };
        /**
         * Format: double
         * @description X-axis coordinate of the location of the item on the board. By default, all items have absolute positioning to the board, not the current viewport. Default: 0. The center point of the board has `x: 0` and `y: 0` coordinates.
         * @example 100
         */
        XCoordinate: number;
        /**
         * Format: double
         * @description Y-axis coordinate of the location of the item on the board. By default, all items have absolute positioning to the board, not the current viewport. Default: 0. The center point of the board has `x: 0` and `y: 0` coordinates.
         * @example 100
         */
        YCoordinate: number;
        BoardSubscription: {
            /**
             * @description Indicates the HTTPS URL to which Miro sends a webhook when an event occurs.
             * @example https://api.asana.com/v2/webhooks_endpoint
             */
            callbackUrl?: string;
            /**
             * Format: date-time
             * @description Date and time when the webhook subscription was created.<br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            data?: components["schemas"]["BoardSubscriptionData"];
            /**
             * @description Unique identifier (ID) of a webhook subscription.
             * @example 99c152bb-8259-4c7a-96d8-ad8eef47ecd4
             */
            id?: string;
            /**
             * Format: date-time
             * @description Date and time when the webhook subscription was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            /**
             * @description Indicates whether the status of the webhook subscription. `enabled`: Miro sends a webhook when an event occurs in the associated board.
             *     `disabled`: Miro does not send a webhook even when an event occurs in the associated board.
             *     `lost_access`: The user with which the webhook subscription is associated has lost access to the board.
             *     The user needs to regain access to the board, and then reenable the webhook subscription by updating the webhook subscription status to `enabled` by using the update webhook endpoint.
             * @default enabled
             * @enum {string}
             */
            status: "enabled" | "disabled" | "lost_access";
            /**
             * @description The type of object associated with the webhook subscription.
             * @example board_subscription
             */
            type?: string;
        };
        /** @description Contains information about a webhook subscription, such as the board ID associated with the webhook subscription, the date and time when the webhook subscription was last updated, and the type of board item that the subscription is associated with. */
        BoardSubscriptionData: {
            /**
             * @description [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) with which the webhook subscription is associated.
             * @example uXjVOfjmfkE=
             */
            boardId?: string;
        };
        /** @description Contains the board ID associated with the webhook subscription, the webhook callback URL, and the status of the webhook subscription. */
        CreateBoardSubscriptionRequest: {
            /** @description [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model) that you want to associate with the webhook subscription. */
            boardId?: string;
            /**
             * @description Indicates the HTTPS URL to which Miro sends a webhook when an event occurs.
             * @example https://yourwebhooklistener.com/v2/webhooks_endpoint
             */
            callbackUrl?: string;
            /**
             * @description Indicates whether the status of the webhook subscription.`enabled`: Miro sends a webhook when an event occurs in the associated board.
             *     `disabled`: Miro does not send a webhook even when an event occurs in the associated board.
             *     `lost_access`: The user with which the webhook subscription is associated has lost access to the board.
             *     The user needs to regain access to the board, and then reenable the webhook subscription by updating the webhook subscription status to `enabled` by using the update webhook endpoint.
             * @default enabled
             * @enum {string}
             */
            status: "enabled" | "disabled";
        };
        GenericSubscription: {
            /**
             * @description Indicates the HTTPS URL to which Miro sends a webhook when an event occurs.
             * @example https://api.asana.com/v2/webhooks_endpoint
             */
            callbackUrl?: string;
            /**
             * Format: date-time
             * @description Date and time when the webhook subscription was created.<br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            data?: components["schemas"]["SubscriptionData"];
            /**
             * @description Unique identifier (ID) of a webhook subscription.
             * @example 99c152bb-8259-4c7a-96d8-ad8eef47ecd4
             */
            id?: string;
            /**
             * Format: date-time
             * @description Date and time when the webhook subscription was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            /**
             * @description Indicates whether the status of the webhook subscription. `enabled`: Miro sends a webhook when an event occurs in the associated board.
             *     `disabled`: Miro does not send a webhook even when an event occurs in the associated board.
             *     `lost_access`: The user with which the webhook subscription is associated has lost access to the board.
             *     The user needs to regain access to the board, and then reenable the webhook subscription by updating the webhook subscription status to `enabled` by using the update webhook endpoint.
             * @default enabled
             * @enum {string}
             */
            status: "enabled" | "disabled" | "lost_access";
            /**
             * @description The type of object associated with the webhook subscription.
             * @example board_subscription
             */
            type?: string;
        };
        GenericSubscriptionsCursorPaged: {
            /**
             * @description A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.
             * @example MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4=
             */
            cursor?: string;
            /** @description Contains the result data. */
            data?: components["schemas"]["GenericSubscription"][];
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response.
             * @example 20
             */
            limit?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             * @example 1
             */
            size?: number;
            /**
             * Format: int64
             * @description Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).
             */
            total?: number;
        };
        /** @description Contains information about a webhook subscription, such as the board ID that the webhook subscription is associated with. */
        SubscriptionData: components["schemas"]["BoardSubscriptionData"];
        /** @description Contains updated information about a subscription. */
        UpdateBoardSubscriptionRequest: {
            /**
             * @description Indicates the HTTPS URL to which Miro sends a webhook when an event occurs.
             * @example https://yourwebhooklistener.com/v2/webhooks_endpoint
             */
            callbackUrl?: string;
            /**
             * @description Indicates whether the status of the webhook subscription. `enabled`: Miro sends a webhook when an event occurs in the associated board.
             *     `disabled`: Miro does not send a webhook even when an event occurs in the associated board.
             *     `lost_access`: The user with which the webhook subscription is associated has lost access to the board.
             *     The user needs to regain access to the board, and then reenable the webhook subscription by updating the webhook subscription status to `enabled` by using the update webhook endpoint.
             * @default enabled
             * @enum {string}
             */
            status: "enabled" | "disabled";
        };
        MindmapCreateRequest: {
            data: components["schemas"]["MindmapDataForCreate"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["MindMapNodeGeometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains mind map node data, such as the title, content, or description. */
        MindmapDataForCreate: {
            nodeView: components["schemas"]["MindmapNode"];
        };
        /** @description Contains information like data about the mind map node. */
        MindmapNode: {
            data?: components["schemas"]["MindmapNodeTextData"];
        };
        /** @description Contains the information about the mind map text. */
        MindmapNodeTextData: {
            /**
             * @description Type of item used as mind map node. Currently, `type` can only be equal to `text`.
             * @example text
             */
            type: string;
            /**
             * @description The actual text (content) that appears in the mind map node.
             * @example Sample text
             */
            content?: string;
        };
        /** @description Contains mind map node data, such as `nodeView` or `isRoot`. */
        MindmapData: {
            nodeView?: components["schemas"]["MindmapNodeView"];
            /** @description Indicates whether this node is the root of the mind map. */
            isRoot?: boolean;
            /**
             * @description Indicates where this node is positioned relative to the root node. `start` indicates that this node must be positioned at the start of the root node, which is either the left or top of the root node. `end` indicates that this node must be positioned at the emd of the root node, which is either the right or bottom of the root node.
             * @enum {string}
             */
            direction?: "start" | "end";
        };
        /** @description Contains the information about the mind map node. */
        MindmapNodeView: {
            /**
             * @description Type of item used as mind map node. Currently, `type` can only be equal to `text`.
             * @example text
             */
            type?: string;
            data?: components["schemas"]["MindmapWidgetDataOutput"];
            style?: components["schemas"]["MindmapNodeStyle"];
        };
        MindmapItem: {
            /**
             * Format: int64
             * @description Unique identifier (ID) of an item.
             * @example 3074457362577955300
             */
            id: string;
            data?: components["schemas"]["MindmapData"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            createdAt?: string;
            createdBy?: components["schemas"]["CreatedBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["ModifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /** @description Type of item that is returned. */
            type: string;
            style?: components["schemas"]["MindmapStyle"];
        };
        MindmapCursorPaged: {
            /** @description Contains the result data. */
            data?: components["schemas"]["MindmapItem"][];
            /**
             * Format: int64
             * @description Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).
             */
            total?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.'
             */
            size?: number;
            /** @description A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.' */
            cursor?: string;
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response.'
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
        };
        /** @description Contains information about the user who created the item. */
        CreatedByPlatformExperimentalFeatures: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last modified the item. */
        ModifiedByPlatformExperimentalFeatures: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        GenericItemCursorPaged: {
            /** @description Contains the result data. */
            data?: components["schemas"]["GenericItem"][];
            /**
             * Format: int64
             * @description Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).
             */
            total?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response considering the `cursor` and the `limit` values sent in the request. For example, if there are `20` results, the request does not have a `cursor` value, and the `limit` set to `10`, the `size` of the results will be `10`.<br>In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             * @example 1
             */
            size?: number;
            /**
             * @description A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the value returned in this parameter.
             * @example MzQ1ODc2NDUyMjQ5MDA4Mjg5NX4=
             */
            cursor?: string;
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `20` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that you obtained from the response.
             * @example 20
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
        };
        /** @description Contains pagination links for the collection. */
        PageLinksPlatformExperimentalFeatures: {
            /**
             * @description Link to retrieve information in the first page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX==
             */
            first?: string;
            /**
             * @description Link to the retrieve information in the last page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX==
             */
            last?: string;
            /**
             * @description Link to retrieve information in the next page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw==
             */
            next?: string;
            /**
             * @description Link to retrieve information in the previous page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=
             */
            prev?: string;
            /**
             * @description Link to retrieve information in the current page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX==
             */
            self?: string;
        };
        /** @description Contains the mind map node data, such as the item title, content, or description. */
        MindmapWidgetDataOutput: components["schemas"]["TextData"];
        ShapeCreateRequest: {
            data?: components["schemas"]["ShapeDataForCreate"];
            style?: components["schemas"]["ShapeStyleForCreate"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains shape item data, such as the content or the type of the shape. */
        ShapeDataForCreate: {
            /**
             * @description The text you want to display on the shape.
             *     <br>**Not supported for shapes:**
             *     <ul>
             *       <li>flow_chart_or</li>
             *       <li>flow_chart_summing_junction</li>
             *     </ul>
             * @example Hello
             */
            content?: string;
            /**
             * @description Defines the geometric shape of the item when it is rendered on the board. <details>
             *       <summary>Basic shapes</summary>
             *       <ul>
             *         <li>rectangle</li>
             *         <li>round_rectangle</li>
             *         <li>circle</li>
             *         <li>triangle</li>
             *         <li>rhombus</li>
             *         <li>parallelogram</li>
             *         <li>trapezoid</li>
             *         <li>pentagon</li>
             *         <li>hexagon</li>
             *         <li>octagon</li>
             *         <li>wedge_round_rectangle_callout</li>
             *         <li>star</li>
             *         <li>flow_chart_predefined_process</li>
             *         <li>cloud</li>
             *         <li>cross</li>
             *         <li>can</li>
             *         <li>right_arrow</li>
             *         <li>left_arrow</li>
             *         <li>left_right_arrow</li>
             *         <li>left_brace</li>
             *         <li>right_brace</li>
             *       </ul>
             *     </details>
             *     <details>
             *       <summary>Flowchart shapes</summary>
             *       <ul>
             *         <li>flow_chart_connector</li>
             *         <li>flow_chart_magnetic_disk</li>
             *         <li>flow_chart_input_output</li>
             *         <li>flow_chart_decision</li>
             *         <li>flow_chart_delay</li>
             *         <li>flow_chart_display</li>
             *         <li>flow_chart_document</li>
             *         <li>flow_chart_magnetic_drum</li>
             *         <li>flow_chart_internal_storage</li>
             *         <li>flow_chart_manual_input</li>
             *         <li>flow_chart_manual_operation</li>
             *         <li>flow_chart_merge</li>
             *         <li>flow_chart_multidocuments</li>
             *         <li>flow_chart_note_curly_left</li>
             *         <li>flow_chart_note_curly_right</li>
             *         <li>flow_chart_note_square</li>
             *         <li>flow_chart_offpage_connector</li>
             *         <li>flow_chart_or</li>
             *         <li>flow_chart_predefined_process_2</li>
             *         <li>flow_chart_preparation</li>
             *         <li>flow_chart_process</li>
             *         <li>flow_chart_online_storage</li>
             *         <li>flow_chart_summing_junction</li>
             *         <li>flow_chart_terminator</li>
             *       </ul>
             *     </details>
             * @default rectangle
             */
            shape: string;
        };
        /** @description Contains shape item data, such as the content or the type of the shape. */
        ShapeDataForUpdate: {
            /**
             * @description The text you want to display on the shape.
             *     **Note: When updating a shape type to one of the types below, existing `content` will be lost.**
             *     <br>**Not supported for shapes:**
             *     <ul>
             *       <li>flow_chart_or</li>
             *       <li>flow_chart_summing_junction</li>
             *     </ul>
             * @example Hello
             */
            content?: string;
            /**
             * @description Defines the geometric shape of the item when it is rendered on the board. <details>
             *       <summary>Basic shapes</summary>
             *       <ul>
             *         <li>rectangle</li>
             *         <li>round_rectangle</li>
             *         <li>circle</li>
             *         <li>triangle</li>
             *         <li>rhombus</li>
             *         <li>parallelogram</li>
             *         <li>trapezoid</li>
             *         <li>pentagon</li>
             *         <li>hexagon</li>
             *         <li>octagon</li>
             *         <li>wedge_round_rectangle_callout</li>
             *         <li>star</li>
             *         <li>flow_chart_predefined_process</li>
             *         <li>cloud</li>
             *         <li>cross</li>
             *         <li>can</li>
             *         <li>right_arrow</li>
             *         <li>left_arrow</li>
             *         <li>left_right_arrow</li>
             *         <li>left_brace</li>
             *         <li>right_brace</li>
             *       </ul>
             *     </details>
             *     <details>
             *       <summary>Flowchart shapes</summary>
             *       <ul>
             *         <li>flow_chart_connector</li>
             *         <li>flow_chart_magnetic_disk</li>
             *         <li>flow_chart_input_output</li>
             *         <li>flow_chart_decision</li>
             *         <li>flow_chart_delay</li>
             *         <li>flow_chart_display</li>
             *         <li>flow_chart_document</li>
             *         <li>flow_chart_magnetic_drum</li>
             *         <li>flow_chart_internal_storage</li>
             *         <li>flow_chart_manual_input</li>
             *         <li>flow_chart_manual_operation</li>
             *         <li>flow_chart_merge</li>
             *         <li>flow_chart_multidocuments</li>
             *         <li>flow_chart_note_curly_left</li>
             *         <li>flow_chart_note_curly_right</li>
             *         <li>flow_chart_note_square</li>
             *         <li>flow_chart_offpage_connector</li>
             *         <li>flow_chart_or</li>
             *         <li>flow_chart_predefined_process_2</li>
             *         <li>flow_chart_preparation</li>
             *         <li>flow_chart_process</li>
             *         <li>flow_chart_online_storage</li>
             *         <li>flow_chart_summing_junction</li>
             *         <li>flow_chart_terminator</li>
             *       </ul>
             *     </details>
             * @default rectangle
             */
            shape: string;
        };
        ShapeItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["ShapeDataForCreate"];
            style?: components["schemas"]["ShapeStyleForCreate"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["CreatedBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["ModifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example shape
             */
            type: string;
        };
        /** @description Contains information about the shape style, such as the border color or opacity. <br> All properties in style object are supported for shape types aren't listed below. <br> <table>
         *       <tr>
         *         <th align="left">Shape type</th>
         *         <th align="left">Unsupported properties</th>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_or</td>
         *         <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_summing_junction</td>
         *         <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_note_curly_left</td>
         *         <td>fillColor, fillOpacity</td>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_note_curly_right</td>
         *         <td>fillColor, fillOpacity</td>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_note_square</td>
         *         <td>fillColor, fillOpacity</td>
         *       </tr>
         *     </table> */
        ShapeStyleForCreate: {
            /** @description Defines the color of the border of the shape.
             *     Default: `#1a1a1a` (dark gray). */
            borderColor?: string;
            /** @description Defines the opacity level of the shape border.
             *     Possible values: any number between `0.0` and `1.0`, where:
             *     `0.0`: the background color is completely transparent or invisible
             *     `1.0`: the background color is completely opaque or solid
             *     Default: `1.0` (solid color). */
            borderOpacity?: string;
            /**
             * @description Defines the style used to represent the border of the shape.
             *     Default: `normal`.
             * @enum {string}
             */
            borderStyle?: "normal" | "dotted" | "dashed";
            /** @description Defines the thickness of the shape border, in dp.
             *     Default: `2.0`. */
            borderWidth?: string;
            /**
             * @description Hex value representing the color for the text within the shape item.
             *     Default: `#1a1a1a`.
             * @example #1a1a1a
             */
            color?: string;
            /**
             * @description Fill color for the shape.
             *     Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`
             *     Default: #ffffff.
             * @example #8fd14f
             */
            fillColor?: string;
            /** @description Opacity level of the fill color.
             *     Possible values: any number between `0` and `1`, where:
             *     `0.0`: the background color is completely transparent or invisible
             *     `1.0`: the background color is completely opaque or solid
             *     Default: `Flowchart` shapes: `1.0`. `Basic` shapes: `1.0` if `fillColor` provided, `0.0` if no `fillColor` provided.
             *      */
            fillOpacity?: string;
            /**
             * @description Defines the font type for the text in the shape item.
             *     Default: `arial`.
             * @enum {string}
             */
            fontFamily?: "arial" | "abril_fatface" | "bangers" | "eb_garamond" | "georgia" | "graduate" | "gravitas_one" | "fredoka_one" | "nixie_one" | "open_sans" | "permanent_marker" | "pt_sans" | "pt_sans_narrow" | "pt_serif" | "rammetto_one" | "roboto" | "roboto_condensed" | "roboto_slab" | "caveat" | "times_new_roman" | "titan_one" | "lemon_tuesday" | "roboto_mono" | "noto_sans" | "plex_sans" | "plex_serif" | "plex_mono" | "spoof" | "tiempos_text" | "formular";
            /** @description Defines the font size, in dp, for the text on the shape.
             *     Default: `14`. */
            fontSize?: string;
            /**
             * @description Defines how the shape text is horizontally aligned.
             *     Default:
             *     Flowchart shapes: `center`.
             *     Basic shapes: `left`.
             *
             *     `unknown` is returned for unsupported shapes.
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center" | "unknown";
            /**
             * @description Defines how the shape text is vertically aligned.
             *     Default:
             *     Flowchart shapes: `middle`.
             *     Basic shapes: `top`.
             *
             *     `unknown` is returned for unsupported shapes.
             * @enum {string}
             */
            textAlignVertical?: "top" | "middle" | "bottom" | "unknown";
        };
        /** @description Contains information about the shape style, such as the border color or opacity. <br> All properties in style object are supported for shape types aren't listed below. <br> <table>
         *       <tr>
         *         <th align="left">Shape type</th>
         *         <th align="left">Unsupported properties</th>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_or</td>
         *         <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_summing_junction</td>
         *         <td>fontSize, fontFamily, color, textAlign, textAlignVertical</td>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_note_curly_left</td>
         *         <td>fillColor, fillOpacity</td>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_note_curly_right</td>
         *         <td>fillColor, fillOpacity</td>
         *       </tr>
         *       <tr>
         *         <td>flow_chart_note_square</td>
         *         <td>fillColor, fillOpacity</td>
         *       </tr>
         *     </table> */
        ShapeStyleForUpdate: {
            /** @description Defines the color of the border of the shape. */
            borderColor?: string;
            /** @description Defines the opacity level of the shape border.
             *     Possible values: any number between `0.0` and `1.0`, where:
             *     `0.0`: the background color is completely transparent or invisible
             *     `1.0`: the background color is completely opaque or solid */
            borderOpacity?: string;
            /**
             * @description Defines the style used to represent the border of the shape.
             * @enum {string}
             */
            borderStyle?: "normal" | "dotted" | "dashed";
            /** @description Defines the thickness of the shape border, in dp. */
            borderWidth?: string;
            /**
             * @description Hex value representing the color for the text within the shape item.
             * @example #1a1a1a
             */
            color?: string;
            /**
             * @description Fill color for the shape.
             *     Hex values: `#f5f6f8` `#d5f692` `#d0e17a` `#93d275` `#67c6c0` `#23bfe7` `#a6ccf5` `#7b92ff` `#fff9b1` `#f5d128` `#ff9d48` `#f16c7f` `#ea94bb` `#ffcee0` `#b384bb` `#000000`
             * @example #8fd14f
             */
            fillColor?: string;
            /** @description Opacity level of the fill color.
             *     Possible values: any number between `0` and `1`, where:
             *     `0.0`: the background color is completely transparent or invisible
             *     `1.0`: the background color is completely opaque or solid
             *      */
            fillOpacity?: string;
            /**
             * @description Defines the font type for the text in the shape item.
             * @enum {string}
             */
            fontFamily?: "arial" | "abril_fatface" | "bangers" | "eb_garamond" | "georgia" | "graduate" | "gravitas_one" | "fredoka_one" | "nixie_one" | "open_sans" | "permanent_marker" | "pt_sans" | "pt_sans_narrow" | "pt_serif" | "rammetto_one" | "roboto" | "roboto_condensed" | "roboto_slab" | "caveat" | "times_new_roman" | "titan_one" | "lemon_tuesday" | "roboto_mono" | "noto_sans" | "plex_sans" | "plex_serif" | "plex_mono" | "spoof" | "tiempos_text" | "formular";
            /** @description Defines the font size, in dp, for the text on the shape. */
            fontSize?: string;
            /**
             * @description Defines how the sticky note text is horizontally aligned.
             * @enum {string}
             */
            textAlign?: "left" | "right" | "center";
            /**
             * @description Defines how the sticky note text is vertically aligned.
             * @enum {string}
             */
            textAlignVertical?: "top" | "middle" | "bottom";
        };
        ShapeUpdateRequest: {
            data?: components["schemas"]["ShapeDataForUpdate"];
            style?: components["schemas"]["ShapeStyleForUpdate"];
            position?: components["schemas"]["PositionChange"];
            geometry?: components["schemas"]["Geometry"];
            parent?: components["schemas"]["Parent"];
        };
        /** @description Contains applicable links for the item. */
        WidgetLinksPlatformExperimentalFeatures: {
            /**
             * @description Link to obtain information about the child items related to the frame.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor=
             */
            related?: string;
            /**
             * @description Link to obtain information about the current item.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487
             */
            self?: string;
        };
        /** @description Contains geometrical information about the item, such as its width or height. */
        GeometryPlatformExperimentalFeatures: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             * @example 60
             */
            height?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        /** @description Contains width of the item. */
        MindMapNodeGeometry: {
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        /** @description Contains information about the node style, such as the node color or fillOpacity. */
        MindmapNodeStyle: {
            /**
             * @description Hex value representing the color for the text within the node.
             * @example #1a1a1a
             */
            color?: string;
            /** @description It sets the opacity level of the background fill color.
             *
             *     Allowed values: any number between 0.0 and 1.0 included.
             *
             *     If the value is 0.0, the background fill color is completely transparent or invisible.
             *     If the value is 1.0, the background fill color is completely opaque or solid.
             *     Default: 0 (transparent) */
            fillOpacity?: string;
            /** @description Defines the font size, in dp, for the text on the node.
             *     Default: `14`. */
            fontSize?: string;
        };
        /** @description Contains information about the node style, such as the widget's border color or shape type. */
        MindmapStyle: {
            /**
             * @description Hex value representing the color of the widget's border.
             * @example #1a1a1a
             */
            nodeColor?: string;
            /**
             * @description Shape type of the widget.
             * @enum {string}
             */
            shape?: "pill" | "rectangle" | "rounded_rectangle" | "none";
            /** @description The same font size as in MindmapNodeStyle. */
            fontSize?: string;
        };
        /** @description Contains information about the user who created the item. */
        CreatedBy: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last modified the item. */
        ModifiedBy: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        DocumentItemPlatformFileUpload: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["DocumentData"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example document
             */
            type: string;
        };
        /** @description Contains geometrical information about the item, such as its width or rotation. You can set either the width or height, you cannot set both the width and height at the same time. */
        FixedRatioGeometryPlatformFileUpload: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             */
            height?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             */
            width?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
        };
        /** @description Contains geometrical information about the item, such as its width or height. */
        GeometryPlatformFileUpload: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             * @example 60
             */
            height?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        ImageItemPlatformFileUpload: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["ImageData"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example image
             */
            type: string;
        };
        /** @description Contains information about the parent frame for the item. */
        ParentLinksEnvelope: {
            /**
             * Format: int64
             * @description Unique identifier (ID) of the parent frame for the item.
             * @example 3074457362577955300
             */
            id?: string;
            links?: components["schemas"]["SelfLink"];
        };
        /** @description Contains information about the item's position on the board, such as its `x` coordinate, `y` coordinate, and the origin of the `x` and `y` coordinates. */
        PositionChange: {
            /**
             * Format: double
             * @description X-axis coordinate of the location of the item on the board.
             *     By default, all items have absolute positioning to the board, not the current viewport. Default: `0`.
             *     The center point of the board has `x: 0` and `y: 0` coordinates.
             * @default 0
             * @example 100
             */
            x: number;
            /**
             * Format: double
             * @description Y-axis coordinate of the location of the item on the board.
             *     By default, all items have absolute positioning to the board, not the current viewport. Default: `0`.
             *     The center point of the board has `x: 0` and `y: 0` coordinates.
             * @default 0
             * @example 100
             */
            y: number;
        };
        /** @description Contains applicable links for the current object. */
        SelfLinkPlatformFileUpload: {
            /**
             * @description Link to obtain more information about the current object.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487
             */
            self?: string;
        };
        /** @description Contains applicable links for the item. */
        WidgetLinksPlatformFileUpload: {
            /**
             * @description Link to obtain information about the child items related to the frame.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor=
             */
            related?: string;
            /**
             * @description Link to obtain information about the current item.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487
             */
            self?: string;
        };
        /** @description Contains information about the user who created the item. */
        createdByPlatformFileUpload: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last modified the item. */
        modifiedByPlatformFileUpload: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        UploadFileFromDevice: {
            data?: {
                /**
                 * @description Title for the document.
                 * @example foo.png
                 */
                title?: string;
                /**
                 * @description A description (alt-text) to help people understand what is depicted here.
                 * @example Sample image alt text
                 */
                altText?: string;
                position?: components["schemas"]["PositionChange"];
                geometry?: components["schemas"]["FixedRatioGeometry"];
                parent?: components["schemas"]["Parent"];
            };
            /**
             * Format: binary
             * @description Select a file to upload. Maximum file size is 6 MB.
             */
            resource: string;
        };
        DocumentItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["DocumentData"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example document
             */
            type: string;
        };
        /** @description Contains geometrical information about the item, such as its width or rotation. You can set either the width or height, you cannot set both the width and height at the same time. */
        FixedRatioGeometry: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             */
            height?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             */
            width?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
        };
        ImageItem: {
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            data?: components["schemas"]["ImageData"];
            position?: components["schemas"]["Position"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["ParentLinksEnvelope"];
            links?: components["schemas"]["WidgetLinks"];
            /**
             * @description Type of item that is returned.
             * @example image
             */
            type: string;
        };
        /** @description Contains applicable links for the item. */
        WidgetLinks: {
            /**
             * @description Link to obtain information about the child items related to the frame.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/items?parent_item_id=307445734914369434&limit=10&cursor=
             */
            related?: string;
            /**
             * @description Link to obtain information about the current item.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/item/3074457349143649487
             */
            self?: string;
        };
        /**
         * @description [Unique identifier (ID) of the board](https://developers.miro.com/reference/board-model)
         * @example uXjVOfjmfkE=
         */
        BoardId: string;
        /**
         * @description Unique identifier (ID) of the item on board
         * @example 3458764584681774600
         */
        WidgetId: string;
        /**
         * @description Unique identifier (ID) of the Group
         * @example 3858764584681774600
         */
        GroupId: string;
        /** @description Contains geometrical information about the item, such as its width or height. */
        GeometryPlatformgroups: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             * @example 60
             */
            height?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        /** @description Contains information about the user who created the item. */
        createdByPlatformgroups: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last modified the item. */
        modifiedByPlatformgroups: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains the result data. */
        Group: {
            data?: {
                /**
                 * @description Unique identifier (ID) of the item.
                 * @example [
                 *       "3458764517517852417",
                 *       "3458764517517852418"
                 *     ]
                 */
                items?: string[];
            };
        };
        /** @description Contains the result data. */
        GroupResponseShort: {
            /**
             * @description Unique identifier (ID) of the group.
             * @example 3258764517517852419
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `group`.
             * @example group
             */
            type?: string;
            data?: components["schemas"]["Group"];
            links?: components["schemas"]["PageLinks"];
        };
        RevokeTokenRequest: {
            /** @description The access token to be revoked. */
            accessToken: string;
            /** @description The client ID associated with the access token. */
            clientId: string;
            /** @description The client secret associated with the access token. */
            clientSecret: string;
        };
        ErrorResponse: {
            /** @description HTTP status code. */
            status?: number;
            /** @description Description of the status code. */
            code?: string;
            /** @description Explanation for the error. */
            message?: string;
            /**
             * @description Type of the object returned.
             * @default error
             */
            type: string;
        };
        /** @description Contains app card item data, such as the title, description, or fields. */
        AppCardData: {
            /**
             * @description A short text description to add context about the app card.
             * @example Sample app card description
             */
            description?: string;
            /** @description Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view. */
            fields?: components["schemas"]["CustomField"][];
            /** @description Defines whether the card is owned by the application making the call. */
            owned?: boolean;
            /**
             * @description Status indicating whether an app card is connected and in sync with the source. When the source for the app card is deleted, the status returns `disabled`.
             * @enum {string}
             */
            status?: "disconnected" | "connected" | "disabled";
            /**
             * @description A short text header to identify the app card.
             * @example sample app card item
             */
            title?: string;
        };
        /** @description Contains card item data, such as the title, description, due date, or assignee ID. */
        CardData: {
            /**
             * Format: int64
             * @description Unique user identifier. In the GUI, the user ID is mapped to the name of the user who is assigned as the owner of the task or activity described in the card. The identifier is numeric, and it is automatically assigned to a user when they first sign up.
             * @example 3074457362577955300
             */
            assigneeId?: string;
            /**
             * @description A short text description to add context about the card.
             * @example sample card description
             */
            description?: string;
            /**
             * Format: date-time
             * @description The date when the task or activity described in the card is due to be completed. In the GUI, users can select the due date from a calendar. Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2023-10-12T22:00:55.000Z
             */
            dueDate?: string;
            /**
             * @description A short text header for the card.
             * @example sample card item
             */
            title?: string;
        };
        /** @description Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view. */
        CustomFieldPlatformTags: {
            /**
             * @description Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.
             * @example #2fa9e3
             */
            fillColor?: string;
            /**
             * @description The shape of the icon on the preview field.
             * @default round
             * @enum {string}
             */
            iconShape: "round" | "square";
            /**
             * @description A valid URL pointing to an image available online.
             *     The transport protocol must be HTTPS.
             *     Possible image file formats: JPG/JPEG, PNG, SVG.
             * @example https://cdn-icons-png.flaticon.com/512/5695/5695864.png
             */
            iconUrl?: string;
            /**
             * @description Hex value representing the color of the text string assigned to `value`.
             * @example #1a1a1a
             */
            textColor?: string;
            /**
             * @description A short text displayed in a tooltip when clicking or hovering over the preview field.
             * @example Completion status indicator
             */
            tooltip?: string;
            /**
             * @description The actual data value of the custom field.
             *     It can be any type of information that you want to convey.
             * @example Status: in progress
             */
            value?: string;
        };
        DocumentData: {
            /**
             * @description The URL to download the resource. You must use your access token to access the URL. The URL contains the `redirect` parameter to control the request execution.
             *     `redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.
             *     If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned is `application/octet-stream`.
             * @example https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?redirect=false
             */
            documentUrl?: string;
            /**
             * @description A short text header to identify the document.
             * @example Sample document title
             */
            title?: string;
        };
        EmbedData: {
            /**
             * @description Type of the embedded item's content.
             * @example video
             */
            contentType?: string;
            /**
             * @description Short description of the embedded item.
             * @example So this is how to organize your life with Miro (a virtual whiteboard) for collaboration, brainstorming, and project management. Students, designers, agile en...
             */
            description?: string;
            /**
             * @description Html code of the embedded item.
             * @example <iframe class=\"embedly-embed\" src=\"//cdn.embedly.com/widgets/media.html?src=...&display_name=YouTube&url=...&schema=youtube\" width=\"854\" height=\"480\" scrolling=\"no\" title=\"YouTube embed\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen=\"true\"></iframe>
             */
            html?: string;
            /**
             * @description Defines how the content in the embed item is displayed on the board.
             *     `inline`: The embedded content is displayed directly on the board.
             *     `modal`: The embedded content is displayed inside a modal overlay on the board.
             * @enum {string}
             */
            mode?: "inline" | "modal";
            /**
             * @description The URL to download the resource. You must use your access token to access the URL.
             *     The URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:
             *     `format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.
             *     `redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.
             *     If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.
             * @example https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false
             */
            previewUrl?: string;
            /**
             * @description Name of the content's provider.
             * @example YouTube
             */
            providerName?: string;
            /**
             * @description Url of the content's provider.
             * @example https://www.youtube.com/
             */
            providerUrl?: string;
            /**
             * @description Title of the embedded item.
             * @example HOW TO ORGANIZE YOUR LIFE WITH MIRO! ✏ Virtual Whiteboard Tour
             */
            title?: string;
            /**
             * @description A [valid URL](https://developers.miro.com/reference/data#embeddata) pointing to the content resource that you want to embed in the board. Possible transport protocols: HTTP, HTTPS.
             * @example https://www.youtube.com/watch?v=HlVSNEiFCBk
             */
            url?: string;
        };
        /** @description Contains information about the style of an item, such as the color, font, or border style. */
        EmptyStyle: Record<string, never>;
        /** @description Contains frame item data, such as the title, frame type, or frame format. */
        FrameData: {
            /**
             * @description Only custom frames are supported at the moment.
             * @default custom
             * @enum {string}
             */
            format: "custom" | "desktop" | "phone" | "tablet" | "a4" | "letter" | "ratio_1x1" | "ratio_4x3" | "ratio_16x9";
            /**
             * @description Title of the frame. This title appears at the top of the frame.
             * @example Sample frame title
             */
            title?: string;
            /**
             * @description Only free form frames are supported at the moment.
             * @default freeform
             * @enum {string}
             */
            type: "freeform" | "heap" | "grid" | "rows" | "columns";
        };
        /** @description Contains the result data. */
        GenericItemPlatformTags: {
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            data?: components["schemas"]["WidgetDataOutput"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["Parent"];
            position?: components["schemas"]["Position"];
            /**
             * @description Type of item that is returned.
             * @example sticky_note
             */
            type: string;
        };
        /** @description Contains geometrical information about the item, such as its width or height. */
        GeometryPlatformTags: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             * @example 60
             */
            height?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        GetTagsResponse: {
            tags?: components["schemas"]["Tag"][];
        };
        ImageData: {
            /**
             * @description The URL to download the resource. You must use your access token to access the URL.
             *     The URL contains the `redirect` parameter and the `format` parameter to control the request execution as described in the following parameters:
             *     `format` parameter: By default, the image format is set to the preview image. If you want to download the original image, set the `format` parameter in the URL to `original`.
             *     `redirect`: By default, the `redirect` parameter is set to `false` and the resource object containing the URL and the resource type is returned with a 200 OK HTTP code. This URL is valid for 60 seconds. You can use this URL to retrieve the resource file.
             *     If the `redirect` parameter is set to `true`, a 307 TEMPORARY_REDIRECT HTTP response is returned. If you follow HTTP 3xx responses as redirects, you will automatically be redirected to the resource file and the content type returned can be `image/png`, 'image/svg', or 'image/jpg', depending on the original image type.
             * @example https://api.miro.com/v2/boards/uXjVOfjkmAk=/resources/98765467890987654?format=preview&redirect=false
             */
            imageUrl?: string;
            /**
             * @description A short text header to identify the image.
             * @example Sample image title
             */
            title?: string;
        };
        ItemPagedResponsePlatformTags: {
            /** @description Contains the result data. */
            data?: components["schemas"]["GenericItem"][];
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.
             *
             * @example 20
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
            /**
             * Format: int32
             * @description Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.
             * @example 0
             */
            offset?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.
             * @example 1
             */
            size?: number;
            /**
             * Format: int64
             * @description Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).
             * @example 1
             */
            total?: number;
            type?: string;
        };
        /** @description Contains pagination links for the collection. */
        PageLinks: {
            /**
             * @description Link to retrieve information in the first page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NaSDN&#RDMDA3MzYyOX==
             */
            first?: string;
            /**
             * @description Link to the retrieve information in the last page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDUyMDA3MzYyOX==
             */
            last?: string;
            /**
             * @description Link to retrieve information in the next page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1ODc2NDUyNDsdgsFEwfFJCw==
             */
            next?: string;
            /**
             * @description Link to retrieve information in the previous page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=
             */
            prev?: string;
            /**
             * @description Link to retrieve information in the current page of the collection.
             * @example http://api.miro.com/v2/boards/o9J_lJWSHdg=/items?limit=10&cursor=MzQ1OD1245643FWUyMDA3MzYyOX==
             */
            self?: string;
        };
        /** @description Contains information about the parent frame for the item. */
        Parent: {
            /**
             * Format: int64
             * @description Unique identifier (ID) of the parent frame for the item.
             * @example 3074457362577955300
             */
            id?: string;
        };
        /** @description Contains location information about the item, such as its x coordinate, y coordinate, and the origin of the x and y coordinates. */
        Position: {
            /**
             * @description Area of the item that is referenced by its x and y coordinates. For example, an item with a center origin will have its x and y coordinates point to its center. The center point of the board has x: 0 and y: 0 coordinates.
             *     Currently, only one option is supported.
             * @default center
             * @enum {string}
             */
            origin: "center";
            /** @enum {string} */
            relativeTo?: "canvas_center" | "parent_top_left";
            /**
             * Format: double
             * @description X-axis coordinate of the location of the item on the board.
             *     By default, all items have absolute positioning to the board, not the current viewport. Default: 0.
             *     The center point of the board has `x: 0` and `y: 0` coordinates.
             * @example 100
             */
            x?: number;
            /**
             * Format: double
             * @description Y-axis coordinate of the location of the item on the board.
             *     By default, all items have absolute positioning to the board, not the current viewport. Default: 0.
             *     The center point of the board has `x: 0` and `y: 0` coordinates.
             * @example 100
             */
            y?: number;
        };
        /** @description Contains applicable links for the current object. */
        SelfLinkPlatformTags: {
            /**
             * @description Link to obtain more information about the current object.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487
             */
            self?: string;
        };
        /** @description Contains shape item data, such as the content or shape type of the shape. */
        ShapeDataPlatformTags: {
            /**
             * @description The text you want to display on the shape.
             * @example Hello
             */
            content?: string;
            /**
             * @description Defines the geometric shape of the item when it is rendered on the board.
             * @default rectangle
             * @enum {string}
             */
            shape: "rectangle" | "round_rectangle" | "circle" | "triangle" | "rhombus" | "parallelogram" | "trapezoid" | "pentagon" | "hexagon" | "octagon" | "wedge_round_rectangle_callout" | "star" | "flow_chart_predefined_process" | "cloud" | "cross" | "can" | "right_arrow" | "left_arrow" | "left_right_arrow" | "left_brace" | "right_brace";
        };
        /** @description Contains sticky note item data, such as the content or shape of the sticky note. */
        StickyNoteDataPlatformTags: {
            /**
             * @description The actual text (content) that appears in the sticky note item.
             * @example Hello
             */
            content?: string;
            /**
             * @description Defines the geometric shape of the sticky note and aspect ratio for its dimensions.
             * @default square
             * @enum {string}
             */
            shape: "square" | "rectangle";
        };
        Tag: {
            /**
             * @description Background color of the tag.
             * @example red
             * @enum {string}
             */
            fillColor: "red" | "light_green" | "cyan" | "yellow" | "magenta" | "green" | "blue" | "gray" | "violet" | "dark_green" | "dark_blue" | "black";
            /**
             * @description Unique identifier of the tag.
             * @example 3074457363306854000
             */
            id: string;
            /**
             * @description Text of the tag.
             * @example delayed
             */
            title: string;
            /** @description Type of the object that is returned. In this case, type returns `tag`. */
            type: string;
        };
        TagCreateRequest: {
            /**
             * @description Fill color for the tag.
             * @default red
             * @enum {string}
             */
            fillColor: "red" | "light_green" | "cyan" | "yellow" | "magenta" | "green" | "blue" | "gray" | "violet" | "dark_green" | "dark_blue" | "black";
            /**
             * @description Text of the tag. Case-sensitive. Must be unique.
             * @example to do
             */
            title: string;
        };
        TagUpdateRequest: {
            /**
             * @description Fill color for the tag.
             * @enum {string}
             */
            fillColor?: "red" | "light_green" | "cyan" | "yellow" | "magenta" | "green" | "blue" | "gray" | "violet" | "dark_green" | "dark_blue" | "black";
            /**
             * @description Text of the tag. Case-sensitive. Must be unique.
             * @example done
             */
            title?: string;
        };
        TagWithLinks: {
            /**
             * @description Unique identifier of the tag.
             * @example 3074457363306854000
             */
            id: string;
            /**
             * @description Text of the tag
             * @example delayed
             */
            title: string;
            /**
             * @description Background color of the tag.
             * @example red
             * @enum {string}
             */
            fillColor: "red" | "light_green" | "cyan" | "yellow" | "magenta" | "green" | "blue" | "gray" | "violet" | "dark_green" | "dark_blue" | "black";
            links?: components["schemas"]["SelfLink"];
            /** @description Type of the object that is returned. In this case, type returns `tag`. */
            type: string;
        };
        TagsPagedResponse: {
            /** @description Contains the result data. */
            data?: components["schemas"]["Tag"][];
            /**
             * Format: int64
             * @description Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).
             * @example 1
             */
            total?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.
             * @example 1
             */
            size?: number;
            /**
             * Format: int32
             * @description Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.
             * @example 0
             */
            offset?: number;
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.
             *
             * @example 20
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
            type?: string;
        };
        /** @description Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data). */
        TextDataPlatformTags: {
            /**
             * @description The actual text (content) that appears in the text item.
             * @example Hello
             */
            content: string;
        };
        /** @description Contains the item data, such as the item title, content, or description. */
        WidgetDataOutput: components["schemas"]["TextData"] | components["schemas"]["EmbedData"] | components["schemas"]["CardData"] | components["schemas"]["AppCardData"] | components["schemas"]["ImageData"] | components["schemas"]["DocumentData"] | components["schemas"]["ShapeData"] | components["schemas"]["FrameData"] | components["schemas"]["StickyNoteData"];
        /** @description Contains information about the user who created the item. */
        createdByPlatformTags: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last modified the item. */
        modifiedByPlatformTags: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Array where each object represents a custom preview field. Preview fields are displayed on the bottom half of the app card in the compact view. */
        CustomField: {
            /**
             * @description Hex value representing the color that fills the background area of the preview field, when it's displayed on the app card.
             * @example #2fa9e3
             */
            fillColor?: string;
            /**
             * @description The shape of the icon on the preview field.
             * @default round
             * @enum {string}
             */
            iconShape: "round" | "square";
            /**
             * @description A valid URL pointing to an image available online.
             *     The transport protocol must be HTTPS.
             *     Possible image file formats: JPG/JPEG, PNG, SVG.
             * @example https://cdn-icons-png.flaticon.com/512/5695/5695864.png
             */
            iconUrl?: string;
            /**
             * @description Hex value representing the color of the text string assigned to `value`.
             * @example #1a1a1a
             */
            textColor?: string;
            /**
             * @description A short text displayed in a tooltip when clicking or hovering over the preview field.
             * @example Completion status indicator
             */
            tooltip?: string;
            /**
             * @description The actual data value of the custom field.
             *     It can be any type of information that you want to convey.
             * @example Status: in progress
             */
            value?: string;
        };
        /** @description Contains the result data. */
        GenericItem: {
            /**
             * Format: date-time
             * @description Date and time when the item was created. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            createdAt?: string;
            createdBy?: components["schemas"]["createdBy"];
            data?: components["schemas"]["WidgetDataOutput"];
            geometry?: components["schemas"]["Geometry"];
            /**
             * @description Unique identifier (ID) of an item.
             * @example 3458764517517819000
             */
            id: string;
            /**
             * Format: date-time
             * @description Date and time when the item was last modified. <br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
             * @example 2022-03-30T17:26:50.000Z
             */
            modifiedAt?: string;
            modifiedBy?: components["schemas"]["modifiedBy"];
            parent?: components["schemas"]["Parent"];
            position?: components["schemas"]["Position"];
            /**
             * @description Type of item that is returned.
             * @example sticky_note
             */
            type: string;
        };
        /** @description Contains geometrical information about the item, such as its width or height. */
        Geometry: {
            /**
             * Format: double
             * @description Height of the item, in pixels.
             * @example 60
             */
            height?: number;
            /**
             * Format: double
             * @description Rotation angle of an item, in degrees, relative to the board. You can rotate items clockwise (right) and counterclockwise (left) by specifying positive and negative values, respectively.
             */
            rotation?: number;
            /**
             * Format: double
             * @description Width of the item, in pixels.
             * @example 320
             */
            width?: number;
        };
        ItemPagedResponse: {
            /** @description Contains the result data. */
            data?: components["schemas"]["GenericItem"][];
            /**
             * Format: int32
             * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the offset parameter. In this example, you will set the offset parameter to 20 as the offset is zero-based.
             *
             * @example 20
             */
            limit?: number;
            links?: components["schemas"]["PageLinks"];
            /**
             * Format: int32
             * @description Zero-based index of the first item in the collection. For example, If there are `30` results, and the request has the offset set to `28`, the response will return `2` results.
             * @example 0
             */
            offset?: number;
            /**
             * Format: int32
             * @description Number of results returned in the response. The `size` is the number of results returned considering the `offset` and the `limit` values sent in the request. For example, if there are `30` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `20`.<br>If there are `10` results, and the request has the offset set to `0` and the `limit` set to `20`, the `size` of the results will be `10`.<br>If there are `30` results, and the request has the offset set to `28` and the `limit` set to `20`, the `size` of the results will be `2` as the `offset` is the zero-based offset of the first item in the collection.
             * @example 1
             */
            size?: number;
            /**
             * Format: int64
             * @description Total number of results available. If the value of the `total` parameter is higher than the value of the `size` parameter, this means that there are more results that you can retrieve. To retrieve more results, you can make another request and set the `offset` value accordingly. For example, if there are `30` results, and the request has the `offset` set to `0` and the `limit` set to `20`, the `size` parameter will return `20` and the `total` parameter will return `30`. This means that there are 9 more results to retrieve (as the offset is zero-based).
             * @example 1
             */
            total?: number;
            type?: string;
        };
        /** @description Contains applicable links for the current object. */
        SelfLink: {
            /**
             * @description Link to obtain more information about the current object.
             * @example http://api.miro.com/v2/boards/o9J_koQspF4=/object_type/3074457349143649487
             */
            self?: string;
        };
        /** @description Contains shape item data, such as the content or shape type of the shape. */
        ShapeData: {
            /**
             * @description The text you want to display on the shape.
             * @example Hello
             */
            content?: string;
            /**
             * @description Defines the geometric shape of the item when it is rendered on the board.
             * @default rectangle
             * @enum {string}
             */
            shape: "rectangle" | "round_rectangle" | "circle" | "triangle" | "rhombus" | "parallelogram" | "trapezoid" | "pentagon" | "hexagon" | "octagon" | "wedge_round_rectangle_callout" | "star" | "flow_chart_predefined_process" | "cloud" | "cross" | "can" | "right_arrow" | "left_arrow" | "left_right_arrow" | "left_brace" | "right_brace";
        };
        /** @description Contains sticky note item data, such as the content or shape of the sticky note. */
        StickyNoteData: {
            /**
             * @description The actual text (content) that appears in the sticky note item.
             * @example Hello
             */
            content?: string;
            /**
             * @description Defines the geometric shape of the sticky note and aspect ratio for its dimensions.
             * @default square
             * @enum {string}
             */
            shape: "square" | "rectangle";
        };
        /** @description Contains text item data, such as the title, content, or description. For more information on the JSON properties, see [Data](https://developers.miro.com/reference/data). */
        TextData: {
            /**
             * @description The actual text (content) that appears in the text item.
             * @example Hello
             */
            content: string;
        };
        /** @description Contains information about the user who created the item. */
        createdBy: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        /** @description Contains information about the user who last modified the item. */
        modifiedBy: {
            /**
             * @description Unique identifier (ID) of the user.
             * @example 3458764517517852417
             */
            id?: string;
            /**
             * @description Indicates the type of object returned. In this case, `type` returns `user`.
             * @example user
             */
            type?: string;
        };
        ProjectPage: {
            /**
             * Format: int32
             * @description The maximum number of results to return per call. If the number of project in the response is greater than the limit specified, the response returns the cursor parameter with a value.
             * @default 100
             * @example 100
             */
            limit: number;
            /**
             * Format: int32
             * @description Number of results returned in the response considering the cursor and the limit values sent in the request. For example, if there are 20 results, the request does not have a cursor value, and the limit set to 10, the size of the results will be 10. In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             * @default 100
             * @example 87
             */
            size: number;
            /** @description Contains the result data. */
            data: components["schemas"]["Project"][];
            /**
             * @description Indicator of the position of the next page of the result. To retrieve the next page, make another query setting its cursor field to the value returned by the current query. If the value is empty, there are no more pages to fetch.
             * @example 3074457345821140946
             */
            cursor?: string;
            /**
             * @description Type of the object returned.
             * @default cursor-list
             */
            type: string;
        };
        Project: {
            /**
             * @description Project ID.
             * @example 3074457345618265000
             */
            id: string;
            /**
             * @description Name of the project.
             * @example Product Guild project
             */
            name: string;
            /**
             * @description Type of the object returned.
             * @default project
             */
            type: string;
        };
        CreateProjectRequest: {
            /**
             * @description Project name.
             * @example My project
             */
            name: string;
        };
        UpdateProjectRequest: {
            /**
             * @description New name of the project.
             * @example My project
             */
            name: string;
        };
        UpdateProjectSettingsRequest: {
            sharingPolicySettings?: components["schemas"]["SharingPolicySettings"];
        };
        ProjectSettings: {
            sharingPolicySettings: components["schemas"]["SharingPolicySettings"];
            /**
             * @description Type of the object
             * @default project_settings
             */
            type: string;
        };
        ProjectMemberPage: {
            /**
             * Format: int32
             * @description The maximum number of results to return per call. If the number of project member in the response is greater than the limit specified, the response returns the cursor parameter with a value.
             * @default 100
             * @example 100
             */
            limit: number;
            /**
             * Format: int32
             * @description Number of results returned in the response considering the cursor and the limit values sent in the request. For example, if there are 20 results, the request does not have a cursor value, and the limit set to 10, the size of the results will be 10. In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
             * @default 100
             * @example 87
             */
            size: number;
            /** @description Contains the result data. */
            data: components["schemas"]["ProjectMember"][];
            /**
             * @description Indicator of the position of the next page of the result. To retrieve the next page, make another query setting its cursor field to the value returned by the current query. If the value is empty, there are no more pages to fetch.
             * @example 3074457345821140946
             */
            cursor?: string;
            /**
             * @description Type of the object returned.
             * @default cursor-list
             */
            type: string;
        };
        ProjectMember: {
            /**
             * @description ID of the project member.
             * @example 3074457345618265000
             */
            id: string;
            /**
             * @description Email ID of the project member.
             * @example someone@domain.com
             */
            email: string;
            role: components["schemas"]["ProjectRole"];
            /**
             * @description Type of the object
             * @default project_member
             */
            type: string;
        };
        AddProjectMemberRequest: {
            /**
             * @description Email ID of the user.
             * @example someone@domain.com
             */
            email: string;
            role: components["schemas"]["ProjectRole"];
        };
        UpdateProjectMemberRequest: {
            role?: components["schemas"]["ProjectRole"];
        };
        SharingPolicySettings: {
            teamAccess?: components["schemas"]["TeamAccess"];
        };
        /**
         * @description Team access
         *     * "private": Only the members of the project can access the information within the project.
         *     * "view":    Anyone in the team can view the information in within the project.
         *
         * @default private
         * @example private
         * @enum {string}
         */
        TeamAccess: "private" | "view";
        /**
         * @description Role of the project member.
         * @example viewer
         * @enum {string}
         */
        ProjectRole: "owner" | "editor" | "viewer" | "commentator" | "coowner";
        /**
         * @description Role of the project member.
         * @example viewer
         * @enum {string}
         */
        ProjectRoleToAdd: "editor" | "viewer" | "commentator" | "coowner";
        Error400: {
            /**
             * @description HTTP status code.
             * @default 400
             */
            status: number;
            /**
             * @description Description of the status code.
             * @default invalidParameters
             */
            code: string;
            /** @description Explanation of the error. */
            message?: string;
            /** @default error */
            type: string;
        };
        Error401: {
            /**
             * @description HTTP status code.
             * @default 401
             */
            status: number;
            /**
             * @description Description of the status code.
             * @default tokenNotProvided
             */
            code: string;
            /** @description Explanation of the error. */
            message?: string;
            /** @default error */
            type: string;
        };
        Error403: {
            /**
             * @description HTTP status code.
             * @default 403
             */
            status: number;
            /**
             * @description Description of the status code.
             * @example forbiddenAccess
             */
            code?: string;
            /** @description Explanation of the error. */
            message?: string;
            /** @default error */
            type: string;
        };
        Error404: {
            /**
             * @description HTTP status code.
             * @default 404
             */
            status: number;
            /**
             * @description Description of the status code.
             * @example notFound
             */
            code?: string;
            /** @description Explanation of the error. */
            message?: string;
            /** @default error */
            type: string;
        };
        Error409: {
            /**
             * @description HTTP status code.
             * @default 409
             */
            status: number;
            /**
             * @description Description of the status code.
             * @example conflict
             */
            code?: string;
            /** @description Explanation of the error. */
            message?: string;
            /** @default error */
            type: string;
        };
        Error429: {
            /**
             * @description HTTP status code.
             * @default 429
             */
            status: number;
            /**
             * @description Description of the status code.
             * @example tooManyRequests
             */
            code?: string;
            /** @description Explanation of the error. */
            message?: string;
            /** @default error */
            type: string;
        };
        BasicError: {
            /** @description HTTP status code. */
            status?: number;
            /** @description Description of the status code. */
            code?: string;
            /** @description Explanation for the error */
            message?: string;
            /**
             * @description Type of the object returned.
             * @default error
             */
            type: string;
        };
        Picture: {
            /**
             * Format: int64
             * @description Id of the picture
             * @example 3074457345618261500
             */
            id?: number;
            /**
             * @description Url of the picture
             * @example https://miro.images/5252525252/125252/266/144/1/size210.jpg
             */
            imageURL?: string;
            /**
             * @description Original team picture url for icon generation
             * @example https://miro.com/original-image.jpg
             */
            originalUrl?: string;
            /**
             * @description Type of the object returned.
             * @default picture
             */
            type: string;
        };
        Team: {
            /**
             * @description Team id
             * @example 3074457345618265000
             */
            id: string;
            /**
             * @description Team name
             * @example My Team
             */
            name: string;
            picture?: components["schemas"]["Picture"];
            /**
             * @description Type of the object returned.
             * @default team
             */
            type: string;
        };
        CreateTeamRequest: {
            /**
             * @description Team name.
             * @example My Team
             */
            name?: string;
        };
        /** @description Team account discovery settings */
        TeamAccountDiscoverySettings: {
            /**
             * @description
             *     * "hidden":  Only invited users can see and access the team.
             *     * "request": Members of organization can find and request to join with admin approval.
             *     * "join":    Members of organization can find and join.
             *
             * @enum {string}
             */
            accountDiscovery?: "hidden" | "request" | "join";
        };
        /** @description Team account discovery settings */
        TeamAccountDiscoverySettingsChanges: {
            /**
             * @description
             *     * "hidden":  Only invited users can see and access the team.
             *     * "request": Members of organization can find and request to join with admin approval.
             *     * "join":    Members of organization can find and join.
             *
             * @enum {string}
             */
            accountDiscovery?: "hidden" | "request" | "join";
        };
        TeamChanges: {
            /**
             * @description New name for the team.
             * @example My Team
             */
            name?: string;
        };
        /** @description Team collaboration settings */
        TeamCollaborationSettings: {
            /**
             * @description
             *     * "enabled": Enable Co-owner role on boards and projects
             *     * "disabled": Disabled Co-owner role on boards and projects
             *
             * @enum {string}
             */
            coOwnerRole?: "enabled" | "disabled";
        };
        /** @description Team collaboration settings */
        TeamCollaborationSettingsChanges: {
            /**
             * @description
             *     * "enabled": Enable Co-owner role on boards and projects
             *     * "disabled": Disabled Co-owner role on boards and projects
             *
             * @enum {string}
             */
            coOwnerRole?: "enabled" | "disabled";
        };
        /** @description Team copy access settings */
        TeamCopyAccessLevelSettings: {
            /**
             * @description
             *     * "anyone":       Anyone with the board access can copy board content on newly created boards.
             *     * "team_members": Team members can copy board content on newly created boards.
             *     * "team_editors": Team members with editing rights can copy board content on newly created boards.
             *     * "board_owner":  Board owners only can copy board content on newly created boards.
             *
             * @enum {string}
             */
            copyAccessLevel?: "anyone" | "team_members" | "team_editors" | "board_owner            -";
            /**
             * @description
             *     * "anyone":       Team members and users outside team can be given permission to copy board content.
             *     * "team_members": Only team members can be given permission to copy board content.
             *
             * @enum {string}
             */
            copyAccessLevelLimitation?: "anyone" | "team_members";
        };
        /** @description Team copy access settings */
        TeamCopyAccessLevelSettingsChanges: {
            /**
             * @description
             *     * "anyone":       Anyone with the board access can copy board content on newly created boards.
             *     * "team_members": Team members can copy board content on newly created boards.
             *     * "team_editors": Team members with editing rights can copy board content on newly created boards.
             *     * "board_owner":  Board owners only can copy board content on newly created boards.
             *
             * @enum {string}
             */
            copyAccessLevel?: "anyone" | "team_members" | "team_editors" | "board_owner";
            /**
             * @description
             *     * "anyone":       Team members and users outside team can be given permission to copy board content.
             *     * "team_members": Only team members can be given permission to copy board content.
             *
             * @enum {string}
             */
            copyAccessLevelLimitation?: "anyone" | "team_members";
        };
        /** @description Team invitation settings */
        TeamInvitationSettings: {
            /**
             * @description
             *     * "allowed": Allow non-team collaborators for team
             *     * "not_allowed": Not Allow non-team collaborators for team
             *
             * @enum {string}
             */
            inviteExternalUsers?: "allowed" | "not_allowed";
            /**
             * @description
             *     * "only_org_admins": Company admins only can invite
             *     * "admins":          Company admins and team admins can invite
             *     * "all_members":     All team members can invite
             *
             * @enum {string}
             */
            whoCanInvite?: "only_org_admins" | "admins" | "all_members";
        };
        /** @description Team invitation settings */
        TeamInvitationSettingsChanges: {
            /**
             * @description
             *     * "allowed": Allow non-team collaborators for team
             *     * "not_allowed": Not Allow non-team collaborators for team
             *
             * @enum {string}
             */
            inviteExternalUsers?: "allowed" | "not_allowed";
            /**
             * @description
             *     * "only_org_admins": Company admins only can invite
             *     * "admins":          Company admins and team admins can invite
             *     * "all_members":     All team members can invite
             *
             * @enum {string}
             */
            whoCanInvite?: "only_org_admins" | "admins" | "all_members";
        };
        TeamMember: {
            /**
             * @description Team member id.
             * @example 3074457345618264000
             */
            id: string;
            /**
             * @description
             *     Role of the team member.
             *     * "member":     Team member with full member permissions.
             *     * "admin":      Admin of a team. Team member with permission to manage team.
             *     * "non_team":   External user, non-team user.
             *     * "team_guest": Team-guest user, user with access only to a team without access to organization.
             *
             * @enum {string}
             */
            role: "non_team" | "member" | "admin" | "team_guest";
            /**
             * Format: date-time
             * @description Date and time when member was invited to the team.
             */
            createdAt?: string;
            /**
             * @description Id of the user who invited the team member.
             * @example 3074457345618264000
             */
            createdBy?: string;
            /**
             * Format: date-time
             * @description Date and time when the user's membership was last updated.
             */
            modifiedAt?: string;
            /**
             * @description Id of the user who last updated the user's membership.
             * @example 3074457345618264000
             */
            modifiedBy?: string;
            /**
             * @description Team id
             * @example 3074457345618265000
             */
            teamId: string;
            /**
             * @description Type of the object returned.
             * @default team-member
             */
            type: string;
        };
        TeamMemberChanges: {
            /**
             * @description
             *     Role of the team member.
             *     * "member":     Team member with full member permissions.
             *     * "admin":      Admin of a team. Team member with permission to manage team.
             *     * "team_guest": Team-guest user, user with access only to a team without access to organization.
             *
             * @example member
             * @enum {string}
             */
            role?: "member" | "admin" | "team_guest";
        };
        TeamMemberInvite: {
            /**
             * @description User email to add to a team
             * @example user@miro.com
             */
            email: string;
            /**
             * @description
             *     Role of the team member.
             *     * "member":     Team member with full member permissions.
             *     * "admin":      Admin of a team. Team member with permission to manage team.
             *     * "team_guest": Team-guest user, user with access only to a team without access to organization.
             *
             * @example member
             * @enum {string}
             */
            role?: "member" | "admin" | "team_guest";
        };
        TeamSettings: {
            /**
             * @description Organization id
             * @example 3074457345618265000
             */
            organizationId?: string;
            teamAccountDiscoverySettings?: components["schemas"]["TeamAccountDiscoverySettings"];
            teamCollaborationSettings?: components["schemas"]["TeamCollaborationSettings"];
            teamCopyAccessLevelSettings?: components["schemas"]["TeamCopyAccessLevelSettings"];
            /**
             * @description Team id
             * @example 3074457345618265000
             */
            teamId?: string;
            teamInvitationSettings?: components["schemas"]["TeamInvitationSettings"];
            teamSharingPolicySettings?: components["schemas"]["TeamSharingPolicySettings"];
            /**
             * @description Type of the object returned.
             * @default team-settings
             */
            type: string;
        };
        TeamSettingsChanges: {
            teamAccountDiscoverySettings?: components["schemas"]["TeamAccountDiscoverySettingsChanges"];
            teamCollaborationSettings?: components["schemas"]["TeamCollaborationSettingsChanges"];
            teamCopyAccessLevelSettings?: components["schemas"]["TeamCopyAccessLevelSettingsChanges"];
            teamInvitationSettings?: components["schemas"]["TeamInvitationSettingsChanges"];
            teamSharingPolicySettings?: components["schemas"]["TeamSharingPolicySettingsChanges"];
        };
        /** @description Team sharing policy settings */
        TeamSharingPolicySettings: {
            /** @description Allow listed domains */
            allowListedDomains?: string[];
            /**
             * @description
             *     * "company_admins": Only company admins can create assets in a team
             *     * "admins": Both team and company admins can create assets in a team.
             *     * "all_members": all_members
             *
             * @enum {string}
             */
            createAssetAccessLevel?: "company_admins" | "admins" | "all_members";
            /**
             * @description
             *     Default board access
             *     * "private": Only board owners can access
             *     * "view":    Anyone in the team can view
             *     * "comment": Anyone in the team can comment
             *     * "edit":    Anyone in the team can edit
             *
             * @enum {string}
             */
            defaultBoardAccess?: "private" | "view" | "comment" | "edit";
            /**
             * @description
             *     Indicates who can change board access and invite users to boards in this team, by default.
             *     * "team_members_with_editing_rights": Any team member with editing rights on the board.
             *     * "owner_and_coowners":               Only the owner and co-owners of the board.
             *
             * @enum {string}
             */
            defaultBoardSharingAccess?: "team_members_with_editing_rights" | "owner_and_coowners";
            /**
             * @description
             *     Default organization access
             *     * "private": Only board owners can access
             *     * "view":    Anyone in the team can view
             *     * "comment": Anyone in the team can comment
             *     * "edit":    Anyone in the team can edit
             *
             * @enum {string}
             */
            defaultOrganizationAccess?: "private" | "view" | "comment" | "edit";
            /**
             * @description
             *     Default project access
             *     * "private": Only board owners can access
             *     * "view":    Anyone in the team can view
             *
             * @enum {string}
             */
            defaultProjectAccess?: "private" | "view";
            /**
             * @description
             *     * "allowed": Allow move board to team
             *     * "not_allowed": Not allow move board to team
             *
             * @enum {string}
             */
            moveBoardToAccount?: "allowed" | "not_allowed";
            /**
             * @description
             *     * "enabled": Enabled. Restrict to listed domain.
             *     * "disabled": Disabled. No domain restriction.
             *     * "enabled_with_external_users_access": Enabled. Restrict to listed domain but allows external users to access.
             *
             * @enum {string}
             */
            restrictAllowedDomains?: "enabled" | "enabled_with_external_user_access" | "disabled";
            /**
             * @description
             *     * "allowed": Allow sharing on team
             *     * "not_allowed": Not allow sharing on team
             *
             * @enum {string}
             */
            sharingOnAccount?: "allowed" | "not_allowed";
            /**
             * @description
             *     * "allowed": Allow sharing on organization
             *     * "allowed_with_editing": Allow sharing with editing on organization
             *     * "not_allowed": Not allow sharing on organization
             *
             * @enum {string}
             */
            sharingOnOrganization?: "allowed" | "allowed_with_editing" | "not_allowed";
            /**
             * @description
             *     * "allowed": Allow sharing via public link
             *     * "allowed_with_editing": Allow sharing with editing via public link
             *     * "not_allowed": Not allow sharing via public link
             *
             * @enum {string}
             */
            sharingViaPublicLink?: "allowed" | "allowed_with_editing" | "not_allowed";
        };
        /** @description Team sharing policy settings */
        TeamSharingPolicySettingsChanges: {
            /** @description Allow listed domains */
            allowListedDomains?: string[];
            /**
             * @description
             *     * "company_admins": Only company admins can create assets in a team
             *     * "admins": Both team and company admins can create assets in a team.
             *     * "all_members": all_members
             *
             * @enum {string}
             */
            createAssetAccessLevel?: "company_admins" | "admins" | "all_members";
            /**
             * @description
             *     Default board access
             *     * "private": Only board owners can access
             *     * "view":    Anyone in the team can view
             *     * "comment": Anyone in the team can comment
             *     * "edit":    Anyone in the team can edit
             *
             * @enum {string}
             */
            defaultBoardAccess?: "private" | "view" | "comment" | "edit";
            /**
             * @description
             *     Indicates who can change board access and invite users to boards in this team, by default.
             *     * "team_members_with_editing_rights": Any team member with editing rights on the board.
             *     * "owner_and_coowners":               Only the owner and co-owners of the board.
             *
             * @default team_members_with_editing_rights
             * @enum {string}
             */
            defaultBoardSharingAccess: "team_members_with_editing_rights" | "owner_and_coowners";
            /**
             * @description
             *     Default organization access
             *     * "private": Only board owners can access
             *     * "view":    Anyone in the team can view
             *     * "comment": Anyone in the team can comment
             *     * "edit":    Anyone in the team can edit
             *
             * @enum {string}
             */
            defaultOrganizationAccess?: "private" | "view" | "comment" | "edit";
            /**
             * @description
             *     Default project access
             *     * "private": Only board owners can access
             *     * "view":    Anyone in the team can view
             *
             * @enum {string}
             */
            defaultProjectAccess?: "private" | "view";
            /**
             * @description
             *     * "allowed": Allow move board to team
             *     * "not_allowed": Not allow move board to team
             *
             * @enum {string}
             */
            moveBoardToAccount?: "allowed" | "not_allowed";
            /**
             * @description
             *     * "enabled": Enabled. Restrict to listed domain.
             *     * "disabled": Disabled. No domain restriction.
             *     * "enabled_with_external_users_access": Enabled. Restrict to listed domain but allows external users to access.
             *
             * @enum {string}
             */
            restrictAllowedDomains?: "enabled" | "enabled_with_external_user_access" | "disabled";
            /**
             * @description
             *     * "allowed": Allow sharing on team
             *     * "not_allowed": Not allow sharing on team
             *
             * @enum {string}
             */
            sharingOnAccount?: "allowed" | "not_allowed";
            /**
             * @description
             *     * "allowed": Allow sharing on organization
             *     * "allowed_with_editing": Allow sharing with editing on organization
             *     * "not_allowed": Not allow sharing on organization
             *
             * @enum {string}
             */
            sharingOnOrganization?: "allowed" | "allowed_with_editing" | "not_allowed";
            /**
             * @description
             *     * "allowed": Allow sharing via public link
             *     * "allowed_with_editing": Allow sharing with editing via public link
             *     * "not_allowed": Not allow sharing via public link
             *
             * @enum {string}
             */
            sharingViaPublicLink?: "allowed" | "allowed_with_editing" | "not_allowed";
        };
        /**
         * Format: int32
         * @description The maximum number of results to return per call. If the number of project in the response is greater than the limit specified, the response returns the cursor parameter with a value.
         * @default 100
         * @example 100
         */
        PageLimit: number;
        /**
         * Format: int32
         * @description Number of results returned in the response considering the cursor and the limit values sent in the request. For example, if there are 20 results, the request does not have a cursor value, and the limit set to 10, the size of the results will be 10. In this example, the response will also return a cursor value that can be used to retrieve the next set of 10 remaining results in the collection.
         * @default 100
         * @example 87
         */
        PageSize: number;
        /**
         * @description Indicator of the position of the next page of the result. To retrieve the next page, make another query setting its cursor field to the value returned by the current query. If the value is empty, there are no more pages to fetch.
         * @example 3074457345821140946
         */
        PageCursor: string;
        /**
         * @description Type of the object returned.
         * @default cursor-list
         */
        PageType: string;
        /** @description Page of teams that match the search query. */
        TeamsPage: {
            limit: components["schemas"]["PageLimit"];
            size: components["schemas"]["PageSize"];
            /** @description List of teams */
            data: components["schemas"]["Team"][];
            cursor?: components["schemas"]["PageCursor"];
            type?: components["schemas"]["PageType"];
        };
        /** @description Page of team members that match the search query. */
        TeamMembersPage: {
            limit: components["schemas"]["PageLimit"];
            size: components["schemas"]["PageSize"];
            /** @description List of team members */
            data: components["schemas"]["TeamMember"][];
            cursor?: components["schemas"]["PageCursor"];
            type?: components["schemas"]["PageType"];
        };
    };
    responses: {
        /** @description 400 error response */
        400: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error400"];
            };
        };
        /** @description 401 error response */
        401: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error401"];
            };
        };
        /** @description 403 error response */
        403: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error403"];
            };
        };
        /** @description 404 error response */
        404: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error404"];
            };
        };
        /** @description 409 error response */
        409: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error409"];
            };
        };
        /** @description 429 error response */
        429: {
            headers: {
                [name: string]: unknown;
            };
            content: {
                "application/json": components["schemas"]["Error429"];
            };
        };
    };
    parameters: {
        /**
         * @description The maximum number of items in the result list.
         * @example 10
         */
        queryPageLimit: number;
        /**
         * @description An indicator of the position of a page in the full set of results. To obtain the first page leave it empty. To obtain subsequent pages set it to the value returned in the cursor field of the previous request.
         *
         * @example MTY2OTg4NTIwMDAwMHwxMjM=
         */
        queryPageCursor: string;
        /** @description Unique identifier (ID) of the board where you want to create the item. */
        boardIdPlatformcreateitemsinbulkusingfilefromdevice: string;
        /** @description Unique identifier (ID) of the board where you want to create the item. */
        boardId: string;
        /**
         * @description The id of the Organization.
         * @example 3074457345618265000
         */
        pathOrgId: string;
        /**
         * @description The id of the Team.
         * @example 3074457345618265000
         */
        pathTeamId: string;
        /**
         * @description The id of the Team Member
         * @example 3074457345618265000
         */
        pathTeamMemberId: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "revoke-token": {
        parameters: {
            query: {
                /** @description Access token that you want to revoke */
                access_token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token revoked */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to revoke token */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "token-info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Token information */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        type: string;
                        /** Organization information */
                        organization: {
                            type: string;
                            name: string;
                            id: string;
                        };
                        /** Team information */
                        team: {
                            type: string;
                            name: string;
                            id: string;
                        };
                        /** User information */
                        createdBy: {
                            type: string;
                            name: string;
                            id: string;
                        };
                        /** User information */
                        user: {
                            type: string;
                            name: string;
                            id: string;
                        };
                        scopes?: string[];
                    };
                };
            };
            /** @description Invalid token provided */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    "enterprise-get-audit-logs": {
        parameters: {
            query: {
                /**
                 * @description Retrieve audit logs created after the date and time provided. This is the start date of the duration for which you want to retrieve audit logs. For example, if you want to retrieve audit logs between `2023-03-30T17:26:50.000Z` and `2023-04-30T17:26:50.000Z`, provide `2023-03-30T17:26:50.000Z` as the value for the `createdAfter` parameter.<br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), including milliseconds and a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC))."
                 *
                 * @example 2023-03-30T17:26:50.000Z
                 */
                createdAfter: string;
                /**
                 * @description Retrieve audit logs created before the date and time provided. This is the end date of the duration for which you want to retrieve audit logs. For example, if you want to retrieve audit logs between `2023-03-30T17:26:50.000Z` and `2023-04-30T17:26:50.000Z`, provide `2023-04-30T17:26:50.000Z` as the value for the `createdBefore` parameter.<br>Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), including milliseconds and a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
                 *
                 * @example 2023-04-30T17:26:50.000Z
                 */
                createdBefore: string;
                /** @description A cursor-paginated method returns a portion of the total set of results based on the `limit` specified and a `cursor` that points to the next portion of the results. To retrieve the next set of results of the collection, set the `cursor` parameter in your next request to the appropriate cursor value returned in the response. */
                cursor?: string;
                /**
                 * @description Maximum number of results returned based on the `limit` specified in the request. For example, if there are `30` results, the request has no `cursor` value, and the `limit` is set to `20`,the `size` of the results will be `20`. The rest of the results will not be returned. To retrieve the rest of the results, you must make another request and set the appropriate value for the `cursor` parameter value that  you obtained from the response.<br>Default: `100`
                 *
                 * @example 100
                 */
                limit?: number;
                /**
                 * @description Sort order in which you want to view the result set. Based on the value you provide, the results are sorted in an ascending or descending order of the audit log creation date (audit log `createdAt` parameter).<br>Default: `ASC`
                 *
                 * @example ASC
                 */
                sorting?: "ASC" | "DESC";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Audit logs fetched */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuditPage"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-dataclassification-organization-settings-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization board classification settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataClassificationOrganizationSettings"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-dataclassification-team-boards-bulk": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
                /**
                 * @description id of the team
                 * @example 3074457345618265000
                 */
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBoardsDataClassificationLabelRequest"];
            };
        };
        responses: {
            /** @description Number of updated boards */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UpdateBoardsDataClassificationLabel"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-dataclassification-team-settings-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
                /**
                 * @description id of the team
                 * @example 3074457345618265000
                 */
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team board classification settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataClassificationTeamSettings"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-dataclassification-team-settings-set": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
                /**
                 * @description id of the team
                 * @example 3074457345618265000
                 */
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateTeamSettingsRequest"];
            };
        };
        responses: {
            /** @description Team board classification settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DataClassificationTeamSettings"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-dataclassification-board-get": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
                /**
                 * @description id of the team
                 * @example 3074457345618265000
                 */
                team_id: string;
                /**
                 * @description Unique identifier of the board that you want to retrieve.
                 * @example o9J_kzlUDmo=
                 */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board classification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardDataClassificationLabel"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-dataclassification-board-set": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
                /**
                 * @description id of the team
                 * @example 3074457345618265000
                 */
                team_id: string;
                /**
                 * @description Unique identifier of the board that you want to update.
                 * @example o9J_kzlUDmo=
                 */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DataClassificationLabelId"];
            };
        };
        responses: {
            /** @description Board classification */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardDataClassificationLabel"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-all-cases": {
        parameters: {
            query: {
                /**
                 * @description The maximum number of items in the result list.
                 * @example 10
                 */
                limit: components["parameters"]["queryPageLimit"];
                /**
                 * @description An indicator of the position of a page in the full set of results. To obtain the first page leave it empty. To obtain subsequent pages set it to the value returned in the cursor field of the previous request.
                 *
                 * @example MTY2OTg4NTIwMDAwMHwxMjM=
                 */
                cursor?: components["parameters"]["queryPageCursor"];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the organization for which you want to retrieve the list of cases.
                 * @example 3074457345618265000
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Case objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedCaseResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-case": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization for which you want to retrieve the case information.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the case you want to retrieve.
                 * @example 3074457345619012007
                 */
                case_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Case object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CaseResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-all-legal-holds": {
        parameters: {
            query: {
                /**
                 * @description The maximum number of items in the result list.
                 * @example 10
                 */
                limit: components["parameters"]["queryPageLimit"];
                /**
                 * @description An indicator of the position of a page in the full set of results. To obtain the first page leave it empty. To obtain subsequent pages set it to the value returned in the cursor field of the previous request.
                 *
                 * @example MTY2OTg4NTIwMDAwMHwxMjM=
                 */
                cursor?: components["parameters"]["queryPageCursor"];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the organization for which you want to retrieve the list of legal holds within a case.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the case for which you want to retrieve the list of legal holds.
                 * @example 3074457345619012007
                 */
                case_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Legal hold objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLegalHoldResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-legal-hold": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization for which you want to retrieve the legal hold information.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the case for which you want to retrieve the legal hold information.
                 * @example 3074457345619012007
                 */
                case_id: string;
                /**
                 * @description The ID of the legal hold you want to retrieve.
                 * @example 3074457345619013003
                 */
                legal_hold_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Legal hold object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LegalHoldResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-legal-hold-content-items": {
        parameters: {
            query: {
                /**
                 * @description The maximum number of items in the result list.
                 * @example 10
                 */
                limit: components["parameters"]["queryPageLimit"];
                /**
                 * @description An indicator of the position of a page in the full set of results. To obtain the first page leave it empty. To obtain subsequent pages set it to the value returned in the cursor field of the previous request.
                 *
                 * @example MTY2OTg4NTIwMDAwMHwxMjM=
                 */
                cursor?: components["parameters"]["queryPageCursor"];
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the organization for which you want to retrieve the list of content items under hold.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the case for which you want to retrieve the list of content items under hold.
                 * @example 3074457345619012007
                 */
                case_id: string;
                /**
                 * @description The ID of the legal hold for which you want to retrieve the list of content items under hold.
                 * @example 3074457345619013003
                 */
                legal_hold_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Content item objects */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PaginatedLegalHoldContentItemsResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-create-board-export": {
        parameters: {
            query: {
                /**
                 * @description Unique identifier of the board export job.
                 * @example 92343229-c532-446d-b8cb-2f155bedb807
                 */
                request_id: string;
            };
            header?: never;
            path: {
                /**
                 * @description Unique identifier of the organization.
                 * @example 3074457345821141000
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBoardExportRequest"];
            };
        };
        responses: {
            /** @description Unique identifier of the board export job */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardExportJobId"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-board-export-job-status": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique identifier of the organization.
                 * @example 3074457345821141000
                 */
                org_id: string;
                /**
                 * @description Unique identifier of the board export job.
                 * @example 92343229-c532-446d-b8cb-2f155bedb807
                 */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board export job status */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardExportJobStatus"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-board-export-job-results": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description Unique identifier of the organization.
                 * @example 3074457345821141000
                 */
                org_id: string;
                /**
                 * @description Unique identifier of the job.
                 * @example 92343229-c532-446d-b8cb-2f155bedb807
                 */
                job_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board export job result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardExportResult"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-board-content-item-logs-fetch": {
        parameters: {
            query: {
                /**
                 * @description List of board IDs for which you want to retrieve the content logs.
                 * @example [
                 *       "o9J_kzlUDmo=",
                 *       "u8J_kllZmDk="
                 *     ]
                 */
                board_ids?: string[];
                /**
                 * @description Filter content logs based on the list of emails of users who created, modified, or deleted the board item.
                 * @example [
                 *       "someone@domain.com",
                 *       "someoneelse@domain.com"
                 *     ]
                 */
                emails?: string[];
                /**
                 * @description Filter content logs based on the date and time when the board item was last modified. This is the start date and time for the modified date duration.
                 *     Format: UTC, adheres to [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
                 *
                 * @example 2022-03-30T17:26:50Z
                 */
                from: string;
                /**
                 * @description Filter content logs based on the date and time when the board item was last modified. This is the end date and time for the modified date duration. Format: UTC, adheres to
                 *     [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601), includes a [trailing Z offset](https://en.wikipedia.org/wiki/ISO_8601#Coordinated_Universal_Time_(UTC)).
                 *
                 * @example 2023-03-30T17:26:50Z
                 */
                to: string;
                /**
                 * @description A cursor-paginated method returns a portion of the total set of results based on the limit specified and a cursor that points to the next portion of the results. To retrieve the next portion of the collection, set the cursor parameter equal to the cursor value you received in the response of the previous request.
                 *
                 * @example MTY2OTg4NTIwMDAwMHwxMjM=
                 */
                cursor?: string;
                /**
                 * @description The maximum number of results to return per call. If the number of logs in the response is greater than the limit specified, the response returns the cursor parameter with a value.
                 *
                 * @example 1000
                 */
                limit?: number;
                /**
                 * @description Sort order in which you want to view the result set based on the modified date. To sort by an ascending modified date, specify `asc`. To sort by a descending modified date, specify `desc`.
                 *
                 * @example asc
                 */
                sorting?: "asc" | "desc";
            };
            header?: never;
            path: {
                /**
                 * @description Unique identifier of the organization.
                 * @example 3074457345821141000
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response from the API that includes content logs of board items such as data, size of the data list, pagination cursor, and pagination limit.
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetBoardItemContentLogsResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-post-user-sessions-reset": {
        parameters: {
            query: {
                /**
                 * @description Email ID of the user whose sessions you want to reset. Note that this user will be signed out from all devices.
                 * @example john.smith@example.com
                 */
                email: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description User Sessions Reset */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-get-organization": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Organization"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-get-organization-members": {
        parameters: {
            query?: {
                emails?: string;
                role?: "organization_internal_admin" | "organization_internal_user" | "organization_external_user" | "organization_team_guest_user" | "unknown";
                license?: "full" | "occasional" | "free" | "free_restricted" | "full_trial" | "unknown";
                active?: boolean;
                cursor?: string;
                limit?: number;
            };
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization members queries successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationMembersSearchResponse"] | components["schemas"]["OrganizationMembersSearchByEmailsResponse"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-get-organization-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description id of the organization
                 * @example 3074457345821141000
                 */
                org_id: string;
                /**
                 * @description id of the organization member
                 * @example 3055557345821141000
                 */
                member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Organization member found */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OrganizationMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "get-boards": {
        parameters: {
            query?: {
                team_id?: string;
                project_id?: string;
                query?: string;
                owner?: string;
                limit?: string;
                offset?: string;
                sort?: "default" | "last_modified" | "last_opened" | "last_created" | "alphabetically";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board search results. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardsPagedResponse"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "copy-board": {
        parameters: {
            query: {
                /** @description Unique identifier (ID) of the board that you want to copy. */
                copy_from: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CopyBoardChanges"];
            };
        };
        responses: {
            /** @description Board copied */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardWithLinksAndWithoutProject"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-board": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["BoardChanges"];
            };
        };
        responses: {
            /** @description Board created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardWithLinks"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "get-specific-board": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board that you want to retrieve. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardWithLinksAndLastOpened"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-board": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board that you want to delete. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "update-board": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board that you want to update. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BoardChanges"];
            };
        };
        responses: {
            /** @description Board updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardWithLinks"];
                };
            };
            /** @description The board update operation has been accepted and will be processed asynchronously. If the operation  exceeds the expected duration, a response will be returned.
             *     To monitor the status of the board update, use the <a target="blank" href="/reference/get-specific-  board">Get specific board</a> API. This API allows you to verify whether the board has been successfully  updated. */
            202: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-app-card-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppCardCreateRequest"];
            };
        };
        responses: {
            /** @description App card item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppCardItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-app-card-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description App card item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppCardItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-app-card-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete an item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description App card item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-app-card-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AppCardUpdateRequest"];
            };
        };
        responses: {
            /** @description Card item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AppCardItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-card-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardCreateRequest"];
            };
        };
        responses: {
            /** @description Card item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-card-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Card item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-card-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Card item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-card-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CardUpdateRequest"];
            };
        };
        responses: {
            /** @description Card item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CardItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "get-connectors": {
        parameters: {
            query?: {
                limit?: string;
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a list of connectors. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Connectors retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectorsCursorPaged"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "create-connector": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board for which you want to create the connector. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectorCreationData"];
            };
        };
        responses: {
            /** @description Connector created */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectorWithLinks"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-connector": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific connector. */
                board_id: string;
                /** @description Unique identifier (ID) of the connector that you want to retrieve. */
                connector_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Connector retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectorWithLinks"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-connector": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the connector. */
                board_id: string;
                /** @description Unique identifier (ID) of the connector that you want to delete. */
                connector_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Connector deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-connector": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board for which you want to update the connector. */
                board_id: string;
                /** @description Unique identifier (ID) of the connector that you want to update. */
                connector_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConnectorChangesData"];
            };
        };
        responses: {
            /** @description Connector updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConnectorWithLinks"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-document-item-using-url": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentCreateRequest"];
            };
        };
        responses: {
            /** @description Document item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-document-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Document item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-document-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Document item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-document-item-using-url": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DocumentUpdateRequest"];
            };
        };
        responses: {
            /** @description Document item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-embed-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmbedCreateRequest"];
            };
        };
        responses: {
            /** @description Embed item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbedItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-embed-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Embed item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbedItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-embed-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Embed item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-embed-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["EmbedUpdateRequest"];
            };
        };
        responses: {
            /** @description Embed item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EmbedItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-image-item-using-url": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImageCreateRequest"];
            };
        };
        responses: {
            /** @description Image item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-image-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-image-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-image-item-using-url": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ImageUpdateRequest"];
            };
        };
        responses: {
            /** @description Image item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "get-items": {
        parameters: {
            query?: {
                limit?: string;
                type?: "text" | "shape" | "sticky_note" | "image" | "document" | "card" | "app_card" | "preview" | "frame" | "embed";
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board for which you want to retrieve the list of available items. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Items retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericItemCursorPaged"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-specific-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-item-position-or-parent": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["GenericItemUpdate"];
            };
        };
        responses: {
            /** @description Item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-board-members": {
        parameters: {
            query?: {
                limit?: string;
                offset?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board to which the board member belongs. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board members retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardMembersPagedResponse"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "share-board": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board to which the board member belongs. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BoardMembersInvite"];
            };
        };
        responses: {
            /** @description Board members invited */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["InvitationResult"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-specific-board-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board to which the board member belongs. */
                board_id: string;
                /** @description Unique identifier (ID) of the board member whose role you want to retrieve. */
                board_member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board member retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardMemberWithLinks"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "remove-board-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete an item. */
                board_id: string;
                /** @description Unique identifier (ID) of the board member whose role you want to delete. */
                board_member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board member deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-board-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board for which you want to update the role of the board member. */
                board_id: string;
                /** @description Unique identifier (ID) of the board member whose role you want to update. */
                board_member_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["BoardMemberChanges"];
            };
        };
        responses: {
            /** @description Board member updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardMemberWithLinks"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "create-shape-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShapeCreateRequest"];
            };
        };
        responses: {
            /** @description Shape item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShapeItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-shape-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shape item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShapeItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-shape-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shape item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-shape-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShapeUpdateRequest"];
            };
        };
        responses: {
            /** @description Shape item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShapeItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-sticky-note-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StickyNoteCreateRequest"];
            };
        };
        responses: {
            /** @description Sticky Note item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StickyNoteItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-sticky-note-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sticky Note item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StickyNoteItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-sticky-note-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Sticky Note item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-sticky-note-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StickyNoteUpdateRequest"];
            };
        };
        responses: {
            /** @description Sticky Note item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["StickyNoteItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-text-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TextCreateRequest"];
            };
        };
        responses: {
            /** @description Text item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "get-text-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Text item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "delete-text-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Text item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "update-text-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TextUpdateRequest"];
            };
        };
        responses: {
            /** @description Text item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TextItem"];
                };
            };
            400: components["responses"]["400"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "create-items": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: components["parameters"]["boardId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ItemCreate"][];
            };
        };
        responses: {
            /** @description Items created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BulkOperationError"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error"];
                };
            };
        };
    };
    "create-frame-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create a frame. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FrameCreateRequest"];
            };
        };
        responses: {
            /** @description Frame created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FrameItem"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-frame-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board that contains the frame that you want to retrieve */
                board_id: string;
                /** @description Unique identifier (ID) of the frame that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Frame retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FrameItem"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "delete-frame-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the frame. */
                board_id: string;
                /** @description Unique identifier (ID) of the frame that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Frame deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "update-frame-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the frame. */
                board_id: string;
                /** @description Unique identifier (ID) of the frame that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["FrameUpdateRequest"];
            };
        };
        responses: {
            /** @description Frame updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FrameItem"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 409
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-items-within-frame": {
        parameters: {
            query: {
                /** @description ID of the frame for which you want to retrieve the list of available items. */
                parent_item_id: string;
                limit?: string;
                type?: string;
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board that contains the frame for which you want to retrieve the list of available items. */
                board_id_PlatformContainers: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Items within frame retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericItemCursorPaged"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "create-items-in-bulk-using-file-from-device": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: components["parameters"]["boardId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": {
                    /**
                     * Format: binary
                     * @description JSON file containing bulk data, where each object represents an item to be created. For details, see [JSON file example](https://developers.miro.com/reference/json-data-example).
                     */
                    data: string;
                    /** @description Array of items to create (PDFs, images, etc.). Maximum of 20 items. */
                    resources: string[];
                };
            };
        };
        responses: {
            /** @description Items created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Items"];
                };
            };
        };
    };
    "get-metrics": {
        parameters: {
            query: {
                /** @description Start date of the period in UTC format. For example, 2024-12-31. */
                startDate: string;
                /** @description End date of the period in UTC format. For example, 2024-12-31. */
                endDate: string;
                /** @description Group data by this time period. */
                period?: "DAY" | "WEEK" | "MONTH";
            };
            header?: never;
            path: {
                /** @description ID of the app to get metrics for. */
                app_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: date
                         * @description Date from which the metrics are aggregated.
                         */
                        periodStart?: string;
                        /** @description Number of unique users who performed at least one activity in the application. */
                        uniqueUsers?: number;
                        /** @description Number of unique users who have been active for more than one day over the past 30 days. */
                        uniqueRecurringUsers?: number;
                        /** @description Number of unique company accounts that have installed the application. */
                        uniqueOrganizations?: number;
                        /** @description Number of application installations for a team. */
                        installations?: number;
                        /** @description Number of application uninstallations for a team. */
                        uninstallations?: number;
                    }[];
                };
            };
            /** @description App not found response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        message?: string;
                        status?: number;
                    };
                };
            };
        };
    };
    "get-metrics-total": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the app to get total metrics for. */
                app_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Number of unique users who performed at least one activity in the application. */
                        uniqueUsers?: number;
                        /** @description Number of unique users who have been active for more than one day over the past 30 days. */
                        uniqueRecurringUsers?: number;
                        /** @description Number of unique company accounts that have installed the application. */
                        uniqueOrganizations?: number;
                        /** @description Number of application installations for a team. */
                        installations?: number;
                        /** @description Number of application uninstallations for a team. */
                        uninstallations?: number;
                    };
                };
            };
            /** @description App not found response */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description Description of the error. */
                        message?: string;
                        /** @description HTTP status code. */
                        status?: number;
                    };
                };
            };
        };
    };
    "create-board-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateBoardSubscriptionRequest"];
            };
        };
        responses: {
            /** @description Subscription created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardSubscription"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "update-board-subscription": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateBoardSubscriptionRequest"];
            };
        };
        responses: {
            /** @description Subscription updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["BoardSubscription"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-user-subscriptions": {
        parameters: {
            query?: {
                limit?: string;
                cursor?: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscriptions retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericSubscriptionsCursorPaged"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-subscription-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the subscription that you want to retrieve */
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericSubscription"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "delete-subscription-by-id": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the subscription that you want to delete */
                subscription_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Subscription deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-mindmap-node-experimental": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a mind map node. */
                board_id: string;
                /** @description Unique identifier (ID) of the mind map node that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mind map node retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MindmapItem"];
                };
            };
        };
    };
    "delete-mindmap-node-experimental": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the mind map node. */
                board_id: string;
                /** @description Unique identifier (ID) of the mind map node that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mind map node deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-mindmap-nodes-experimental": {
        parameters: {
            query?: {
                /** @description Maximum number of results returned */
                limit?: string;
                /** @description Points to the next portion of the results set */
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve mind map nodes. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Mind map nodes retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MindmapCursorPaged"];
                };
            };
        };
    };
    "create-mindmap-nodes-experimental": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MindmapCreateRequest"];
            };
        };
        responses: {
            /** @description Mind map node created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MindmapItem"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-items-experimental": {
        parameters: {
            query?: {
                limit?: string;
                type?: "shape";
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board for which you want to retrieve the list of available items. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Items retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericItemCursorPaged"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-specific-item-experimental": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GenericItem"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "delete-item-experimental": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "create-shape-item-flowchart": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShapeCreateRequest"];
            };
        };
        responses: {
            /** @description Shape item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShapeItem"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-shape-item-flowchart": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to retrieve a specific item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shape item retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShapeItem"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "delete-shape-item-flowchart": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board from which you want to delete the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to delete. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Shape item deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "update-shape-item-flowchart": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ShapeUpdateRequest"];
            };
        };
        responses: {
            /** @description Shape item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ShapeItem"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "create-document-item-using-file-from-device": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id_PlatformFileUpload: string;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": {
                    data?: {
                        /**
                         * @description Title for the document.
                         * @example foo.pdf
                         */
                        title?: string;
                        position?: components["schemas"]["PositionChange"];
                        geometry?: components["schemas"]["FixedRatioGeometry"];
                        parent?: components["schemas"]["Parent"];
                    };
                    /**
                     * Format: binary
                     * @description Select a file to upload. Maximum file size is 6 MB.
                     */
                    resource: string;
                };
            };
        };
        responses: {
            /** @description Document item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentItem"];
                };
            };
        };
    };
    "update-document-item-using-file-from-device": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id_PlatformFileUpload: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadFileFromDevice"];
            };
        };
        responses: {
            /** @description Document item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DocumentItem"];
                };
            };
        };
    };
    "create-image-item-using-local-file": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the item. */
                board_id_PlatformFileUpload: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadFileFromDevice"];
            };
        };
        responses: {
            /** @description Image item created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageItem"];
                };
            };
        };
    };
    "update-image-item-using-file-from-device": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update the item. */
                board_id_PlatformFileUpload: string;
                /** @description Unique identifier (ID) of the item that you want to update. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["UploadFileFromDevice"];
            };
        };
        responses: {
            /** @description Image item updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ImageItem"];
                };
            };
        };
    };
    "get-all-groups": {
        parameters: {
            query?: {
                /** @description The maximum number of items to return at one time, default is 10, maximum is 50. */
                limit?: number;
                cursor?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board. */
                board_id: components["schemas"]["BoardId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Groups retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: int32
                         * @description Limit of items.
                         * @example 10
                         */
                        limit?: number;
                        /**
                         * Format: int32
                         * @description Size of the items.
                         * @example 1
                         */
                        size?: number;
                        data?: components["schemas"]["GroupResponseShort"][];
                    };
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 404
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 429
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    createGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                board_id: components["schemas"]["BoardId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Group"];
            };
        };
        responses: {
            /** @description Group created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponseShort"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 404
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 429
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    getItemsByGroupId: {
        parameters: {
            query: {
                /** @description The maximum number of items to return at one time, default is 10, maximum is 50. */
                limit?: number;
                cursor?: string;
                /** @description The ID of the group item to retrieve. */
                group_item_id: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board. */
                board_id: components["schemas"]["BoardId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Items retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * Format: int32
                         * @description Limit of items.
                         * @example 10
                         */
                        limit?: number;
                        /**
                         * Format: int32
                         * @description Size of the items.
                         * @example 1
                         */
                        size?: number;
                        /**
                         * Format: int32
                         * @description total items that are part of any group
                         * @example 1
                         */
                        total?: number;
                        data?: {
                            /**
                             * @description Unique identifier (ID) of the group.
                             * @example 3258764517517852419
                             */
                            id?: string;
                            /** @description Indicates the type of object returned. In this case, `type` returns `group`. */
                            type?: string;
                            data?: components["schemas"]["ItemPagedResponse"][];
                        };
                    };
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 404
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 429
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    getGroupById: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board. */
                board_id: components["schemas"]["BoardId"];
                /** @description Unique identifier (ID) of the group. */
                group_id: components["schemas"]["GroupId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Group retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponseShort"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 404
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 429
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    updateGroup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board. */
                board_id: components["schemas"]["BoardId"];
                /** @description Unique identifier (ID) of the group. */
                group_id: components["schemas"]["GroupId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["Group"];
            };
        };
        responses: {
            /** @description update group response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GroupResponseShort"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 404
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 429
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    unGroup: {
        parameters: {
            query?: {
                /** @description Indicates whether the items should be removed. By default, false. */
                delete_items?: boolean;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board. */
                board_id: components["schemas"]["BoardId"];
                /** @description Unique identifier (ID) of the group. */
                group_id: components["schemas"]["GroupId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Ungrouped */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 404
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 429
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    deleteGroup: {
        parameters: {
            query: {
                /** @description Indicates whether the items should be removed. Set to `true` to delete items in the group. */
                delete_items: boolean;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board. */
                board_id: components["schemas"]["BoardId"];
                /** @description Unique identifier (ID) of the group. */
                group_id: components["schemas"]["GroupId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Group deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 404
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error.
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error.
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status Code of the error.
                         * @example 429
                         */
                        status?: number;
                        /**
                         * @description Type of the error.
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "revoke-token-v2": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RevokeTokenRequest"];
            };
        };
        responses: {
            /** @description Token revoked */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Failed to revoke token */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    "get-tags-from-item": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board with the item whose tags you want to retrieve. */
                board_id: string;
                /** @description Unique identifier (ID) of the item whose tags you want to retrieve. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Get tags from an item */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["GetTagsResponse"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-tags-from-board": {
        parameters: {
            query?: {
                limit?: string;
                offset?: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board whose tags you want to retrieve. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Board tags retrieved */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagsPagedResponse"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "create-tag": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to create the tag. */
                board_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagCreateRequest"];
            };
        };
        responses: {
            /** @description Tag created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagWithLinks"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-tag": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to retrieve a specific tag. */
                board_id: string;
                /** @description Unique identifier (ID) of the tag that you want to retrieve. */
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag retrieved by id */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagWithLinks"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "delete-tag": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to delete a specific tag. */
                board_id: string;
                /** @description Unique identifier (ID) of the tag that you want to delete. */
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "update-tag": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to update a specific tag. */
                board_id: string;
                /** @description Unique identifier (ID) of the tag that you want to update. */
                tag_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TagUpdateRequest"];
            };
        };
        responses: {
            /** @description Tag updated */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TagWithLinks"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "get-items-by-tag": {
        parameters: {
            query: {
                limit?: string;
                offset?: string;
                /** @description Unique identifier (ID) of the tag that you want to retrieve. */
                tag_id: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board where you want to retrieve a specific tag. */
                board_id_PlatformTags: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Item with certain tag */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ItemPagedResponse"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "attach-tag-to-item": {
        parameters: {
            query: {
                /** @description Unique identifier (ID) of the tag you want to add to the item. */
                tag_id: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board with the item that you want to add a tag to. */
                board_id_PlatformTags: string;
                /** @description Unique identifier (ID) of the item to which you want to add a tag. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Add a tag to an item */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "remove-tag-from-item": {
        parameters: {
            query: {
                /** @description Unique identifier (ID) of the tag that you want to remove from the item. */
                tag_id: string;
            };
            header?: never;
            path: {
                /** @description Unique identifier (ID) of the board with the item that you want to remove a tag from. */
                board_id_PlatformTags: string;
                /** @description Unique identifier (ID) of the item that you want to remove the tag from. */
                item_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Tag removed from an item */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /**
                         * @description Code of the error
                         * @example error
                         */
                        code?: string;
                        /**
                         * @description Description of the error
                         * @example Error message
                         */
                        message?: string;
                        /**
                         * Format: int32
                         * @description Status code of the error
                         * @example 400
                         */
                        status?: number;
                        /**
                         * @description Type of the error
                         * @example error
                         */
                        type?: string;
                    };
                };
            };
        };
    };
    "enterprise-get-projects": {
        parameters: {
            query?: {
                /**
                 * @description The maximum number of results to return per call. If the number of projects in the response is greater than the limit specified, the response returns the cursor parameter with a value.
                 * @example 100
                 */
                limit?: number;
                /**
                 * @description An indicator of the position of a page in the full set of results. To obtain the first page leave it empty. To obtain subsequent pages set it to the value returned in the cursor field of the previous request.
                 * @example 3074457345618265000
                 */
                cursor?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the organization from which you want to retrieve the list of available projects.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team from which you want to retrieve the list of available projects.
                 * @example 3074457345619012000
                 */
                team_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains the result set information, such as the content, limit, cursor, or size. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectPage"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-create-project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization within which you you want to create a project.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team within which you you want to create a project.
                 * @example 3074457345619012000
                 */
                team_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProjectRequest"];
            };
        };
        responses: {
            /** @description Contains information about the project, such as the project name. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-get-project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization from which you want to retrieve the project information.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team from which you want to retrieve the project information.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of the project for which you want to retrieve the information.
                 * @example 3074457345618265000
                 */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-delete-project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization from which you want to delete a project.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team from which you want to delete a project.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of the project that you want to delete.
                 * @example 3074457345618265000
                 */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-update-project": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of an Organization.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of a Team.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of a Project.
                 * @example 3074457345618265000
                 */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProjectRequest"];
            };
        };
        responses: {
            /** @description Project object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Project"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-get-project-settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization to which the project belongs.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team to which the project belongs.
                 * @example 3074457345619012091
                 */
                team_id: string;
                /**
                 * @description The ID of the project for which you want to retrieve the project settings.
                 * @example 3074457345618265000
                 */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Defines the sharing policies for the boards within the project. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectSettings"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-update-project-settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization to which the project belongs.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team to which the project belongs.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of the project whose settings you want to update.
                 * @example 3074457345618265000
                 */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProjectSettingsRequest"];
            };
        };
        responses: {
            /** @description Project object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectSettings"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-get-project-members": {
        parameters: {
            query?: {
                /**
                 * @description The maximum number of results to return per call. If the number of project members in the response is greater than the limit specified, the response returns the cursor parameter with a value.
                 * @example 100
                 */
                limit?: number;
                /**
                 * @description An indicator of the position of a page in the full set of results. To obtain the first page leave it empty. To obtain subsequent pages set it to the value returned in the cursor field of the previous request.
                 * @example 3074457345618265000
                 */
                cursor?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The ID of the organization to which the project belongs.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team to which the project belongs.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of the project for which you want to retrieve the list of members.
                 * @example 3074457345618265000
                 */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of project member */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMemberPage"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-add-project-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization to which the project belongs.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team to which the project belongs.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of the project to which you want to add a user.
                 * @example 3074457345618265000
                 */
                project_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddProjectMemberRequest"];
            };
        };
        responses: {
            /** @description Project object */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMember"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-get-project-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization to which the project belongs.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team to which the project belongs.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of the project from which you want to retrieve specific member information.
                 * @example 3074457345618265000
                 */
                project_id: string;
                /**
                 * @description The ID of the member for which you want to retrieve information.
                 * @example 307445734562315000
                 */
                member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains information about the project member, such as the member's role. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMember"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-delete-project-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization to which the project belongs.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team to which the project belongs.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of the project from which you want to remove a member.
                 * @example 3074457345618265000
                 */
                project_id: string;
                /**
                 * @description The ID of the member that you want to remove from a project.
                 * @example 3074457345618265000
                 */
                member_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Project member removed */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-update-project-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The ID of the organization to which the project member belongs.
                 * @example 3074457345618265000
                 */
                org_id: string;
                /**
                 * @description The ID of the team to which the project member belongs.
                 * @example 3074457345619012000
                 */
                team_id: string;
                /**
                 * @description The ID of a Project.
                 * @example 3074457345618265000
                 */
                project_id: string;
                /**
                 * @description The ID of the member whose details you want to update.
                 * @example 307445734562315000
                 */
                member_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProjectMemberRequest"];
            };
        };
        responses: {
            /** @description Contains information about the project member, such as the member's role. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProjectMember"];
                };
            };
            /** @description Malformed request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error400"];
                };
            };
            /** @description Invalid authentication credentials */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error401"];
                };
            };
            /** @description Invalid access */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error403"];
                };
            };
            /** @description Not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error404"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error409"];
                };
            };
            /** @description Too many requests */
            429: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Error429"];
                };
            };
        };
    };
    "enterprise-get-teams": {
        parameters: {
            query?: {
                limit?: number;
                /**
                 * @description An indicator of the position of a page in the full set of results. To obtain the first page leave it empty. To obtain subsequent pages set it to the value returned in the cursor field of the previous request.
                 * @example 3055557345821140500
                 */
                cursor?: string;
                /**
                 * @description Name query. Filters teams by name using case insensitive partial match. A value "dev" will return both "Developer's team" and "Team for developers".
                 * @example My team
                 */
                name?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of teams that match the search query. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamsPage"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-create-team": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTeamRequest"];
            };
        };
        responses: {
            /** @description Team object */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-get-team": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-delete-team": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team deleted */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-update-team": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TeamChanges"];
            };
        };
        responses: {
            /** @description Team object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Team"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-get-team-members": {
        parameters: {
            query?: {
                limit?: number;
                /**
                 * @description An indicator of the position of a page in the full set of results. To obtain the first page leave it empty. To obtain subsequent pages set it to the value returned in the cursor field of the previous request.
                 * @example 3055557345821140500
                 */
                cursor?: string;
                /** @description
                 *     Role query. Filters members by role using full word match. Accepted values are:
                 *     * "member":     Team member with full member permissions.
                 *     * "admin":      Admin of a team. Team member with permission to manage team.
                 *     * "non_team":   External user, non-team user.
                 *     * "team_guest": Team-guest user, user with access only to a team without access to organization.
                 *      */
                role?: string;
            };
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Page of team members that match the search query. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMembersPage"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-invite-team-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TeamMemberInvite"];
            };
        };
        responses: {
            /** @description Invitation result object */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-get-team-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
                /**
                 * @description The id of the Team Member
                 * @example 3074457345618265000
                 */
                member_id: components["parameters"]["pathTeamMemberId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team member object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-delete-team-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
                /**
                 * @description The id of the Team Member
                 * @example 3074457345618265000
                 */
                member_id: components["parameters"]["pathTeamMemberId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-update-team-member": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
                /**
                 * @description The id of the Team Member
                 * @example 3074457345618265000
                 */
                member_id: components["parameters"]["pathTeamMemberId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TeamMemberChanges"];
            };
        };
        responses: {
            /** @description Team member object */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamMember"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-get-default-team-settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of an Organization.
                 * @example 3074457345618265000
                 */
                org_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamSettings"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-get-team-settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Team settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamSettings"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            429: components["responses"]["429"];
        };
    };
    "enterprise-update-team-settings": {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /**
                 * @description The id of the Organization.
                 * @example 3074457345618265000
                 */
                org_id: components["parameters"]["pathOrgId"];
                /**
                 * @description The id of the Team.
                 * @example 3074457345618265000
                 */
                team_id: components["parameters"]["pathTeamId"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["TeamSettingsChanges"];
            };
        };
        responses: {
            /** @description Team settings */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["TeamSettings"];
                };
            };
            400: components["responses"]["400"];
            401: components["responses"]["401"];
            403: components["responses"]["403"];
            404: components["responses"]["404"];
            409: components["responses"]["409"];
            429: components["responses"]["429"];
        };
    };
}
